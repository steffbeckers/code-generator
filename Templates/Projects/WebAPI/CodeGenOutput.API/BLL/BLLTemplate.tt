<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CodeGen.Models" #>
<# CodeGenModelProperty defaultKey = _config.Models.DefaultKey(_model); #>
using CodeGenOutput.API.DAL;
using CodeGenOutput.API.Models;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace CodeGenOutput.API.BLL
{
    public interface I<#= _model.Name #>BLL
    {
        Task<IEnumerable<<#= _model.Name #>>> Get<#= _model.NamePlural #>Async();
        Task<<#= _model.Name #>> Get<#= _model.Name #>By<#= defaultKey.Name #>Async(<#= defaultKey.Type #> <#= defaultKey.Name.ToLower() #>);
        // Task<IEnumerable<<#= _model.Name #>>> Search<#= _model.Name #>Async(string term);
        Task<<#= _model.Name #>> Create<#= _model.Name #>Async(<#= _model.Name #> <#= _model.Name.ToLower() #>);
        Task<<#= _model.Name #>> Update<#= _model.Name #>Async(<#= _model.Name #> <#= _model.Name.ToLower() #>);
        Task Delete<#= _model.Name #>Async(<#= defaultKey.Type #> <#= defaultKey.Name.ToLower() #>);
    }

    public partial class BusinessLogicLayer : I<#= _model.Name #>BLL
    {
        private readonly IRepository<<#= _model.Name #>> _<#= _model.Name.ToLower() #>Repository;

        public async Task<IEnumerable<<#= _model.Name #>>> Get<#= _model.NamePlural #>Async()
        {
            return await _<#= _model.Name.ToLower() #>Repository.GetAllAsync();
        }

        public async Task<<#= _model.Name #>> Get<#= _model.Name #>By<#= defaultKey.Name #>Async(<#= defaultKey.Type #> <#= defaultKey.Name.ToLower() #>)
        {
            <#= _model.Name #> <#= _model.Name.ToLower() #> = await _<#= _model.Name.ToLower() #>Repository.GetBy<#= defaultKey.Name #>Async(<#= defaultKey.Name.ToLower() #>);
            return <#= _model.Name.ToLower() #>;
        }

        // public async Task<IEnumerable<<#= _model.Name #>>> Search<#= _model.Name #>Async(string term)
        // {
        //     return await _<#= _model.Name.ToLower() #>Repository.Search<#= _model.Name #>(term);
        // }

        public async Task<<#= _model.Name #>> Create<#= _model.Name #>Async(<#= _model.Name #> <#= _model.Name.ToLower() #>)
        {
            <#= _model.Name #> created<#= _model.Name #> = await _<#= _model.Name.ToLower() #>Repository.CreateAsync(<#= _model.Name.ToLower() #>);
            await _unitOfWork.Commit();
            return created<#= _model.Name #>;
        }

        public async Task<<#= _model.Name #>> Update<#= _model.Name #>Async(<#= _model.Name #> <#= _model.Name.ToLower() #>)
        {
            // Keep creating auditing details
            <#= _model.Name #> existing<#= _model.Name #> = await Get<#= _model.Name #>By<#= defaultKey.Name #>Async(<#= _model.Name.ToLower() #>.<#= defaultKey.Name #>);
<# CodeGenModelProperty auditDateCreatedProperty = _config.Models.DefaultAuditDateCreatedProperty(); #>
<# if (auditDateCreatedProperty != null) { #>
            <#= _model.Name.ToLower() #>.DateCreated = existing<#= _model.Name #>.DateCreated;
<# } #>

            <#= _model.Name #> updated<#= _model.Name #> = await _<#= _model.Name.ToLower() #>Repository.UpdateAsync(<#= _model.Name.ToLower() #>);
            await _unitOfWork.Commit();
            return updated<#= _model.Name #>;
        }

        public async Task Delete<#= _model.Name #>Async(<#= defaultKey.Type #> <#= defaultKey.Name.ToLower() #>)
        {
            await _<#= _model.Name.ToLower() #>Repository.DeleteAsync(<#= defaultKey.Name.ToLower() #>);
            await _unitOfWork.Commit();
        }
    }
}
