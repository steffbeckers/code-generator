<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CodeGen.Models" #>
<# CodeGenModelProperty defaultKey = _config.Models.DefaultKey(_model); #>
using CodeGenOutput.API.DAL.Repositories;
using CodeGenOutput.API.Models;
using CodeGenOutput.API.Validation;
using FluentValidation.Results;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using ValidationException = CodeGenOutput.API.Validation.ValidationException;

namespace CodeGenOutput.API.BLL
{
    public interface I<#= _model.Name #>BLL
    {
        Task<IEnumerable<<#= _model.Name #>>> Get<#= _model.NamePlural #>Async(string include = "");
        Task<<#= _model.Name #>> Get<#= _model.Name #>By<#= defaultKey.Name #>Async(<#= defaultKey.Type #> <#= defaultKey.Name.ToLower() #>, string include = "");
        Task<<#= _model.Name #>> Create<#= _model.Name #>Async(<#= _model.Name #> <#= _model.Name.ToLower() #>);
        Task<<#= _model.Name #>> Update<#= _model.Name #>Async(<#= _model.Name #> <#= _model.Name.ToLower() #>);
        Task Delete<#= _model.Name #>Async(<#= defaultKey.Type #> <#= defaultKey.Name.ToLower() #>);
    }

    public partial class BusinessLogicLayer : I<#= _model.Name #>BLL
    {
        public async Task<IEnumerable<<#= _model.Name #>>> Get<#= _model.NamePlural #>Async(string include = "")
        {
            return await _unitOfWork.GetRepository<<#= _model.Name #>>().GetAsync(include: include);
        }

        public async Task<<#= _model.Name #>> Get<#= _model.Name #>By<#= defaultKey.Name #>Async(<#= defaultKey.Type #> <#= defaultKey.Name.ToLower() #>, string include = "")
        {
            return await _unitOfWork.GetRepository<<#= _model.Name #>>().GetBy<#= defaultKey.Name #>Async(<#= defaultKey.Name.ToLower() #>, include: include);
        }

        public async Task<<#= _model.Name #>> Create<#= _model.Name #>Async(<#= _model.Name #> <#= _model.Name.ToLower() #>)
        {
            await Validate<#= _model.Name #>Async(<#= _model.Name.ToLower() #>);
            <#= _model.Name #> created<#= _model.Name #> = await _unitOfWork.GetRepository<<#= _model.Name #>>().CreateAsync(<#= _model.Name.ToLower() #>);
            await _unitOfWork.Commit();
            
            return created<#= _model.Name #>;
        }

        public async Task<<#= _model.Name #>> Update<#= _model.Name #>Async(<#= _model.Name #> <#= _model.Name.ToLower() #>)
        {
            await Validate<#= _model.Name #>Async(<#= _model.Name.ToLower() #>);
            <#= _model.Name #> updated<#= _model.Name #> = await _unitOfWork.GetRepository<<#= _model.Name #>>().UpdateAsync(<#= _model.Name.ToLower() #>);
            await _unitOfWork.Commit();
            
            return updated<#= _model.Name #>;
        }

        public async Task Delete<#= _model.Name #>Async(<#= defaultKey.Type #> <#= defaultKey.Name.ToLower() #>)
        {
            await _unitOfWork.GetRepository<<#= _model.Name #>>().DeleteAsync(<#= defaultKey.Name.ToLower() #>);
            await _unitOfWork.Commit();
        }

        private async Task Validate<#= _model.Name #>Async(<#= _model.Name #> <#= _model.Name.ToLower() #>)
        {
            ValidationResult validationResult = await Validators.<#= _model.Name #>Validator.ValidateAsync(<#= _model.Name.ToLower() #>);
            if (!validationResult.IsValid) { throw new ValidationException(validationResult.Errors); }
        }
    }
}
