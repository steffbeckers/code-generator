<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CodeGen.Models" #>
using CodeGenOutput.API.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace CodeGenOutput.API.DAL
{
    public class ApplicationDbContext : DbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)
        {}

<# foreach (CodeGenModel model in _config.Models.List) { #>
        public DbSet<<#= model.Name #>> <#= model.NamePlural #> { get; set; }
<# } #>

        protected override void OnModelCreating(ModelBuilder builder)
        {
            builder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());

            base.OnModelCreating(builder);
        }
<# CodeGenModelProperty auditDeletedProperty = _config.Models.DefaultAuditDeletedProperty(); #>
<# CodeGenModelProperty auditDateCreatedProperty = _config.Models.DefaultAuditDateCreatedProperty(); #>
<# CodeGenModelProperty auditDateModifiedProperty = _config.Models.DefaultAuditDateModifiedProperty(); #>
<# if (auditDeletedProperty != null || auditDateCreatedProperty != null || auditDateModifiedProperty != null) { #>

        public override Task<int> SaveChangesAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            foreach (var entry in ChangeTracker.Entries<Auditable>())
            {
<# if (auditDeletedProperty != null) { #>
                // Soft delete
                if (entry.State == EntityState.Deleted) {
                    entry.State = EntityState.Modified;
                    entry.CurrentValues["<#= auditDeletedProperty.Name #>"] = <#= auditDeletedProperty.Type == "bool" ? "true" : auditDeletedProperty.Type == "DateTime?" ? "DateTime.Now" : "" #>;
                }
<# } #>
<# if (auditDateCreatedProperty != null || auditDateModifiedProperty != null) { #>

                switch (entry.State)
                {
<# if (auditDateCreatedProperty != null) { #>
                    case EntityState.Added:
                        entry.Entity.<#= auditDateCreatedProperty.Name #> = DateTime.Now;
                        break;
<# } #>
<# if (auditDateModifiedProperty != null) { #>
                    case EntityState.Modified:
                        entry.Entity.<#= auditDateModifiedProperty.Name #> = DateTime.Now;
                        break;
<# } #>
                }
<# } #>
            }

            return base.SaveChangesAsync(cancellationToken);
        }
<# } #>
    }
}
