<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CodeGen.Models" #>
<# CodeGenModelProperty defaultKey = _config.Models.DefaultKey(); #>
using CodeGenOutput.API.Requests;
using CodeGenOutput.API.Requests.<#= _model.NamePlural #>;
using CodeGenOutput.API.ViewModels;
using MediatR;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace CodeGenOutput.API.Controllers
{
    [Route("api/<#= _model.NamePlural.ToLower() #>")]
    [ApiController]
    public class <#= _model.NamePlural #>Controller : ControllerBase
    {
        private readonly IMediator _mediator;

        public <#= _model.NamePlural #>Controller(IMediator mediator)
        {
            _mediator = mediator;
        }

        // GET: api/<#= _model.NamePlural.ToLower() #>
        [HttpGet]
        public async Task<ActionResult<Response<List<<#= _model.Name #>ListVM>>>> Get<#= _model.NamePlural #>([FromQuery] int skip = 0, [FromQuery] int take = 20)
        {
            return Ok(await _mediator.Send(new Get<#= _model.NamePlural #>() { Skip = skip, Take = take }));
        }

        // GET: api/<#= _model.NamePlural.ToLower() #>/{<#= defaultKey.Name.ToLower() #>}
        [HttpGet("{<#= defaultKey.Name.ToLower() #>}")]
        public async Task<ActionResult<Response<<#= _model.Name #>VM>>> Get<#= _model.Name #>By<#= defaultKey.Name #>([FromRoute] <#= defaultKey.Type #> <#= defaultKey.Name.ToLower() #>)
        {
            return Ok(await _mediator.Send(new Get<#= _model.Name #>By<#= defaultKey.Name #>() { <#= defaultKey.Name #> = <#= defaultKey.Name.ToLower() #> }));
        }

        // POST: api/<#= _model.NamePlural.ToLower() #>
        [HttpPost]
        public async Task<ActionResult<Response<<#= _model.Name #>VM>>> Create<#= _model.Name #>([FromBody] <#= _model.Name #>CreateVM <#= _model.Name.ToLower() #>CreateVM)
        {
            Response<<#= _model.Name #>VM> response = await _mediator.Send(new Create<#= _model.Name #>() { <#= _model.Name #>CreateVM = <#= _model.Name.ToLower() #>CreateVM });
            return CreatedAtAction("Get<#= _model.Name #>By<#= defaultKey.Name #>", new { <#= defaultKey.Name.ToLower() #> = response.Data.<#= defaultKey.Name #> }, response);
        }

        // PUT: api/<#= _model.NamePlural.ToLower() #>/{<#= defaultKey.Name.ToLower() #>}
        [HttpPut("{<#= defaultKey.Name.ToLower() #>}")]
        public async Task<ActionResult<Response<<#= _model.Name #>VM>>> Update<#= _model.Name #>([FromRoute] <#= defaultKey.Type #> <#= defaultKey.Name.ToLower() #>, [FromBody] <#= _model.Name #>UpdateVM <#= _model.Name.ToLower() #>UpdateVM)
        {
            if (<#= defaultKey.Name.ToLower() #> != <#= _model.Name.ToLower() #>UpdateVM.<#= defaultKey.Name #>) { return BadRequest(); }
            return Ok(await _mediator.Send(new Update<#= _model.Name #>() { <#= _model.Name #>UpdateVM = <#= _model.Name.ToLower() #>UpdateVM }));
        }

        // DELETE: api/<#= _model.NamePlural.ToLower() #>/{<#= defaultKey.Name.ToLower() #>}
        [HttpDelete("{<#= defaultKey.Name.ToLower() #>}")]
        public async Task<ActionResult<Response>> Delete<#= _model.Name #>([FromRoute] <#= defaultKey.Type #> <#= defaultKey.Name.ToLower() #>)
        {
            return Ok(await _mediator.Send(new Delete<#= _model.Name #>() { <#= defaultKey.Name #> = <#= defaultKey.Name.ToLower() #> }));
        }
    }
}
