<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CodeGen.Models" #>
using AutoMapper;
using CodeGenOutput.API.DAL;
using CodeGenOutput.API.Models;
using CodeGenOutput.API.ViewModels;
using MediatR;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace CodeGenOutput.API.Requests.<#= _model.NamePlural #>
{
    public class Get<#= _model.NamePlural #> : IRequest<Response>
    {
        public string Include { get; set; }
    }

    public class Get<#= _model.NamePlural #>Handler : IRequestHandler<Get<#= _model.NamePlural #>, Response>
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;

        public Get<#= _model.NamePlural #>Handler(IUnitOfWork unitOfWork, IMapper mapper)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
        }

        public async Task<Response> Handle(Get<#= _model.NamePlural #> request, CancellationToken cancellationToken)
        {
            IRepository<<#= _model.Name #>> repository = _unitOfWork.GetRepository<<#= _model.Name #>>();

            IEnumerable<<#= _model.Name #>> <#= _model.NamePlural.ToLower() #> = await repository.GetAsync(include: request.Include);

            return new Response() { Data = _mapper.Map<List<<#= _model.Name #>ListVM>>(<#= _model.NamePlural.ToLower() #>).ToList() };
        }
    }
}
