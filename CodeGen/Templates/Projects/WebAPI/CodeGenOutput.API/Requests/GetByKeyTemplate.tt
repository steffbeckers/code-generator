<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CodeGen.Models" #>
<# CodeGenModelProperty defaultKey = _config.Models.DefaultKey(_model); #>
using AutoMapper;
using CodeGenOutput.API.BLL;
using CodeGenOutput.API.Models;
using CodeGenOutput.API.ViewModels;
using MediatR;
using System;
using System.Threading;
using System.Threading.Tasks;

namespace CodeGenOutput.API.Requests.<#= _model.NamePlural #>
{
    public class Get<#= _model.Name #>By<#= defaultKey.Name #> : IRequest<Response>
    {
        public <#= defaultKey.Type #> <#= defaultKey.Name #> { get; set; }
        public string Include { get; set; }
    }

    public class Get<#= _model.Name #>By<#= defaultKey.Name #>Handler : IRequestHandler<Get<#= _model.Name #>By<#= defaultKey.Name #>, Response>
    {
        private readonly I<#= _model.Name #>BLL _bll;
        private readonly IMapper _mapper;

        public Get<#= _model.Name #>By<#= defaultKey.Name #>Handler(IBusinessLogicLayer bll, IMapper mapper)
        {
            _bll = bll;
            _mapper = mapper;
        }

        public async Task<Response> Handle(Get<#= _model.Name #>By<#= defaultKey.Name #> request, CancellationToken cancellationToken)
        {
            <#= _model.Name #> <#= _model.Name.ToLower() #> = await _bll.Get<#= _model.Name #>By<#= defaultKey.Name #>Async(request.<#= defaultKey.Name #>, request.Include);
            if (<#= _model.Name.ToLower() #> == null)
            {
                return new Response() { Success = false, Message = $"<#= _model.Name #> {request.<#= defaultKey.Name #>} not found." };
            }

            return new Response() { Data = _mapper.Map<<#= _model.Name #>VM>(<#= _model.Name.ToLower() #>) };
        }
    }
}
