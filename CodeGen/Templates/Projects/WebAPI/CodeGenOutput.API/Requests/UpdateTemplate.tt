<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CodeGen.Models" #>
<# CodeGenModelProperty defaultKey = _config.Models.DefaultKey(_model); #>
using AutoMapper;
using CodeGenOutput.API.BLL;
using CodeGenOutput.API.DAL;
using CodeGenOutput.API.Models;
using CodeGenOutput.API.Validation;
using CodeGenOutput.API.ViewModels;
using FluentValidation.Results;
using MediatR;
using System.Threading;
using System.Threading.Tasks;
using ValidationException = CodeGenOutput.API.Validation.ValidationException;

namespace CodeGenOutput.API.Requests.<#= _model.NamePlural #>
{
    public class Update<#= _model.Name #> : IRequest<Response>
    {
        public <#= _model.Name #>UpdateVM <#= _model.Name #>UpdateVM { get; set; }
    }

    public class Update<#= _model.Name #>Handler : IRequestHandler<Update<#= _model.Name #>, Response>
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;

        public Update<#= _model.Name #>Handler(IUnitOfWork unitOfWork, IMapper mapper)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
        }

        public async Task<Response> Handle(Update<#= _model.Name #> request, CancellationToken cancellationToken)
        {
            IRepository<<#= _model.Name #>> repository = _unitOfWork.GetRepository<<#= _model.Name #>>();

            <#= _model.Name #> <#= _model.Name.ToLower() #> = await repository.GetByIdAsync(request.<#= _model.Name #>UpdateVM.Id);
            _mapper.Map(request.<#= _model.Name #>UpdateVM, <#= _model.Name.ToLower() #>);

            ValidationResult validationResult = await Validators.<#= _model.Name #>Validator.ValidateAsync(<#= _model.Name.ToLower() #>, cancellationToken);
            if (!validationResult.IsValid)
            {
                return new Response()
                {
                    Success = false,
                    Code = "<#= _model.Name.ToUpper() #>_INVALID",
                    Message = "<#= _model.Name #> data invalid",
                    Data = validationResult.Errors
                };
            }

            <#= _model.Name.ToLower() #> = await repository.UpdateAsync(<#= _model.Name.ToLower() #>);
            await _unitOfWork.Commit();

            return new Response()
            {
                Code = "<#= _model.Name.ToUpper() #>_UPDATED",
                Message = "<#= _model.Name #> updated",
                Data = _mapper.Map<<#= _model.Name #>VM>(<#= _model.Name.ToLower() #>)
            };
        }
    }
}
