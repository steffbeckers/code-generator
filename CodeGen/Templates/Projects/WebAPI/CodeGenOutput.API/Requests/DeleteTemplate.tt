<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CodeGen.Models" #>
<# CodeGenModelProperty defaultKey = _config.Models.DefaultKey(_model); #>
using AutoMapper;
using CodeGenOutput.API.BLL;
using CodeGenOutput.API.DAL;
using CodeGenOutput.API.Models;
using MediatR;
using System;
using System.Threading;
using System.Threading.Tasks;

namespace CodeGenOutput.API.Requests.<#= _model.NamePlural #>
{
    public class Delete<#= _model.Name #> : IRequest<Response>
    {
        public <#= defaultKey.Type #> <#= defaultKey.Name #> { get; set; }
    }

    public class Delete<#= _model.Name #>Handler : IRequestHandler<Delete<#= _model.Name #>, Response>
    {
        private readonly IUnitOfWork _unitOfWork;

        public Delete<#= _model.Name #>Handler(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        public async Task<Response> Handle(Delete<#= _model.Name #> request, CancellationToken cancellationToken)
        {
            IRepository<<#= _model.Name #>> repository = _unitOfWork.GetRepository<<#= _model.Name #>>();

            await repository.DeleteAsync(request.Id);
            await _unitOfWork.Commit();

            return new Response()
            {
                Code = "<#= _model.Name.ToUpper() #>_DELETED",
                Message = "<#= _model.Name #> deleted"
            };
        }
    }
}
