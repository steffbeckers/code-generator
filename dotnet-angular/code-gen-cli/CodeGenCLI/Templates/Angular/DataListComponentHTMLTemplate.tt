<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CodeGenCLI.CodeGenClasses" #>
<#@ import namespace="CodeGenCLI.Extensions" #>
<h1><#= !string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s" #></h1>
<table cellspacing="0" cellpadding="5">
  <thead>
<# foreach (CodeGenModelProperty property in model.Properties) { #>
    <th><#= property.DisplayName ?? property.Name #></th>
<# } #>
<# foreach (CodeGenModelRelation relation in model.Relations.Where(r => r.Type == "many-to-one")) { #>
    <th><#= relation.DisplayName ?? relation.Name #></th>
<# } #>
  </thead>
  <tbody>
    <tr *ngFor="let <#= model.Name.ToCamelCase() #> of <#= (!string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s").ToLower() #>">
<# foreach (CodeGenModelProperty property in model.Properties) { #>
      <td>{{ <#= model.Name.ToCamelCase() #>.<#= property.Name.ToCamelCase() #> }}</td>
<# } #>
<# foreach (CodeGenModelRelation relation in model.Relations.Where(r => r.Type == "many-to-one")) { #>
      <td>{{ <#= model.Name.ToCamelCase() #>.<#= relation.Name.ToCamelCase() #>.<#= relation.DisplayField.ToCamelCase() #> }}</td>
<# } #>
    </tr>
  </tbody>
</table>
