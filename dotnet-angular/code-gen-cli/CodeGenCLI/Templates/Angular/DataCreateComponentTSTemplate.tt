<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CodeGenCLI.CodeGenClasses" #>
<#@ import namespace="CodeGenCLI.Extensions" #>
import { Component, OnInit } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

// Models
import { <#= model.Name #> } from 'src/app/shared/models/<#= model.Name #>';

// Services
import { <#= model.Name #>Service } from 'src/app/shared/services/<#= model.Name #>Service';

@Component({
  selector: 'app-<#= model.Name.ToLower() #>-create',
  templateUrl: './create.component.html',
  styleUrls: ['./create.component.scss']
})
export class <#= model.Name #>CreateComponent implements OnInit {
  // <#= model.Name #>
  public <#= model.Name.ToCamelCase() #>Form: FormGroup;
  public creating: boolean;

  constructor(
    private router: Router,
    private route: ActivatedRoute,
    private fb: FormBuilder,
    private <#= model.Name.ToCamelCase() #>Service: <#= model.Name #>Service
  ) {
    this.creating = false;
  }

  ngOnInit(): void {
    this.<#= model.Name.ToCamelCase() #>Form = this.fb.group({
<# foreach (CodeGenModelProperty property in model.Properties) { #>
      <#= property.Name.ToCamelCase() #>: [''<# if (property.Required) { #>, Validators.required<# } #>],
<# } #>
<# foreach (CodeGenModelRelation relation in model.Relations.Where(r => r.Type == "many-to-one")) { #>
      <#= relation.Name.ToCamelCase() #>Id: [''<# if (relation.Required) { #>, Validators.required<# } #>],
<# } #>
<# foreach (CodeGenModelRelation relation in model.Relations.Where(r => r.Type == "many-to-many")) { #>
      <#= relation.Model.ToCamelCase() #>Id: [''<# if (relation.Required) { #>, Validators.required<# } #>],
<# } #>
    });

    // Patch query params to form from URL
    this.route.queryParams.subscribe((queryParams) => {
      this.<#= model.Name.ToCamelCase() #>Form.patchValue(queryParams);
    });
  }

  public create<#= model.Name #>(): void {
    // Validate
    if (this.<#= model.Name.ToCamelCase() #>Form.invalid || this.creating) {
      return;
    }

    // Already creating check
    this.creating = true;

    this.<#= model.Name.ToCamelCase() #>Service.create<#= model.Name #>(this.<#= model.Name.ToCamelCase() #>Form.value).subscribe(
      (<#= model.Name.ToCamelCase() #>: <#= model.Name #>) => {
        this.creating = false;

        this.router.navigateByUrl('/<#= (!string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + 's').ToLower() #>/' + <#= model.Name.ToCamelCase() #>.id);
      },
      null,
      () => {
        this.creating = false;
      }
    );
  }
}
