<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CodeGenCLI.CodeGenClasses" #>
<#@ import namespace="CodeGenCLI.Extensions" #>
<p *ngIf="!<#= model.Name.ToCamelCase() #>">Loading...</p>
<div *ngIf="<#= model.Name.ToCamelCase() #>?.id" fxLayout="column" fxLayoutAlign="start">
  <div fxLayout="row" fxLayoutAlign="start center" fxLayoutGap="20px">
    <!-- #-#-# {C7F36FD4-5D57-4CBB-8B49-D6781BD5E2D0} -->
    <h1><#= model.Name #> - {{ <#= model.Name.ToCamelCase() #>.<#= model.DisplayField.ToCamelCase() #> }}</h1>
    <!-- #-#-# -->
    <button (click)="delete<#= model.Name #>()">Delete</button>
    <button [routerLink]="['/<#= (!string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + 's').ToLower() #>', <#= model.Name.ToCamelCase() #>.id, 'edit']">Edit</button>
  </div>
  <div fxLayout="row wrap" fxLayoutAlign="start" fxLayoutGap="10px">
<# foreach (CodeGenModelProperty property in model.Properties) { #>
    <div fxLayout="column" fxLayoutAlign="start" fxLayoutGap="5px" fxFlex>
      <label class="bold"><#= property.DisplayName ?? property.Name #></label>
<# if (property.Type == "bool") { #>
      <input type="checkbox" [ngModel]="<#= model.Name.ToCamelCase() #>.<#= property.Name.ToCamelCase() #>" disabled>
<# } else { #>
      <span>{{ <#= model.Name.ToCamelCase() #>.<#= property.Name.ToCamelCase() #> }}</span>
<# } #>
    </div>
<# } #>
<# foreach (CodeGenModelRelation relation in model.Relations.Where(r => r.Type == "many-to-one")) { #>
<# CodeGenModel relationModel = config.Models.Single(m => m.Name == relation.Model); #>
      <div fxLayout="column" fxLayoutAlign="start" fxLayoutGap="5px" fxFlex>
        <label class="bold"><#= relation.DisplayName ?? relation.Name #></label>
        <span *ngIf="<#= model.Name.ToCamelCase() #>.<#= relation.Name.ToCamelCase() #>" [routerLink]="['/<#= (!string.IsNullOrEmpty(relationModel.NamePlural) ? relationModel.NamePlural : relationModel.Name + "s").ToLower() #>', <#= model.Name.ToCamelCase() #>.<#= relation.Name.ToCamelCase() #>.id]" class="cursor--pointer">
          {{ <#= model.Name.ToCamelCase() #>.<#= relation.Name.ToCamelCase() #>.<#= relation.DisplayField.ToCamelCase() #> }}
        </span>
      </div>
<# } #>
  </div>
<# foreach (CodeGenModelRelation relation in model.Relations.Where(r => r.Type == "one-to-many" || r.Type == "many-to-many")) { #>
<# CodeGenModel relationModel = config.Models.Single(m => m.Name == relation.Model); #>
  <div fxLayout="row" fxLayoutAlign="start center" fxLayoutGap="20px">
    <h2><#= !string.IsNullOrEmpty(relationModel.NamePlural) ? relationModel.NamePlural : relationModel.Name + 's' #></h2>
    <a routerLink="/<#= (!string.IsNullOrEmpty(relationModel.NamePlural) ? relationModel.NamePlural : relationModel.Name + 's').ToLower() #>/create" [queryParams]="{ <#= model.Name.ToCamelCase() #>Id: <#= model.Name.ToCamelCase() #>.id }">Add new <#= relationModel.Name #></a>
  </div>
  <div fxLayout="row" fxLayoutAlign="start">
    <p *ngIf="<#= model.Name.ToCamelCase() #>.<#= (!string.IsNullOrEmpty(relationModel.NamePlural) ? relationModel.NamePlural : relationModel.Name + 's').ToLower() #> && <#= model.Name.ToCamelCase() #>.<#= (!string.IsNullOrEmpty(relationModel.NamePlural) ? relationModel.NamePlural : relationModel.Name + 's').ToLower() #>.length === 0">No <#= (!string.IsNullOrEmpty(relationModel.NamePlural) ? relationModel.NamePlural : relationModel.Name + 's').ToLower() #> added yet.</p>
    <table *ngIf="<#= model.Name.ToCamelCase() #>.<#= (!string.IsNullOrEmpty(relationModel.NamePlural) ? relationModel.NamePlural : relationModel.Name + 's').ToLower() #> && <#= model.Name.ToCamelCase() #>.<#= (!string.IsNullOrEmpty(relationModel.NamePlural) ? relationModel.NamePlural : relationModel.Name + 's').ToLower() #>.length > 0" cellspacing="0" cellpadding="5">
      <thead>
<# foreach (CodeGenModelProperty property in relationModel.Properties) { #>
        <th><#= property.DisplayName ?? property.Name #></th>
<# } #>
      </thead>
      <tbody>
        <tr *ngFor="let <#= relationModel.Name.ToCamelCase() #> of <#= model.Name.ToCamelCase() #>.<#= (!string.IsNullOrEmpty(relationModel.NamePlural) ? relationModel.NamePlural : relationModel.Name + 's').ToLower() #>" [routerLink]="['/<#= (!string.IsNullOrEmpty(relationModel.NamePlural) ? relationModel.NamePlural : relationModel.Name + 's').ToLower() #>', <#= relationModel.Name.ToCamelCase() #>.id]">
<# foreach (CodeGenModelProperty property in relationModel.Properties) { #>
          <td>
<# if (property.Type == "bool") { #>
            <input type="checkbox" [ngModel]="<#= relationModel.Name.ToCamelCase() #>.<#= property.Name.ToCamelCase() #>" disabled>
<# } else { #>
            {{ <#= relationModel.Name.ToCamelCase() #>.<#= property.Name.ToCamelCase() #> }}
<# } #>
          </td>
<# } #>
        </tr>
      </tbody>
    </table>
  </div>
<# } #>
</div>
