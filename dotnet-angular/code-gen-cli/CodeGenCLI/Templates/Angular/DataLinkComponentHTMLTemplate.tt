<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CodeGenCLI.CodeGenClasses" #>
<#@ import namespace="CodeGenCLI.Extensions" #>

<p *ngIf="!<#= model.Name.ToCamelCase() #>">Loading...</p>
<div *ngIf="<#= model.Name.ToCamelCase() #>?.id" fxLayout="column" fxLayoutAlign="start">
  <div fxLayout="row" fxLayoutAlign="start center" fxLayoutGap="20px">
    <h1 [routerLink]="['/<#= (!string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + 's').ToLower() #>', <#= model.Name.ToCamelCase() #>.id]"><#= model.Name #> - {{ <#= model.Name.ToCamelCase() #>.<#= !string.IsNullOrEmpty(model.DisplayField) ? model.DisplayField.ToCamelCase() : "id" #> }}</h1>
  </div>
  <div fxLayout="row wrap" fxLayoutAlign="start" fxLayoutGap="10px">
<# foreach (CodeGenModelProperty property in model.Properties) { #>
    <div fxLayout="column" fxLayoutAlign="start" fxLayoutGap="5px" fxFlex>
      <label class="bold"><#= property.DisplayName ?? property.Name #></label>
<# if (property.Type == "bool") { #>
      <input type="checkbox" [ngModel]="<#= model.Name.ToCamelCase() #>.<#= property.Name.ToCamelCase() #>" disabled>
<# } else { #>
      <span>{{ <#= model.Name.ToCamelCase() #>.<#= property.Name.ToCamelCase() #> }}</span>
<# } #>
    </div>
<# } #>
<# foreach (CodeGenModelRelation relation in model.Relations.Where(r => r.Type == "many-to-one")) { #>
<# CodeGenModel relationModel = config.Models.Single(m => m.Name == relation.Model); #>
      <div fxLayout="column" fxLayoutAlign="start" fxLayoutGap="5px" fxFlex>
        <label class="bold"><#= relation.DisplayName ?? relation.Name #></label>
        <span *ngIf="<#= model.Name.ToCamelCase() #>.<#= relation.Name.ToCamelCase() #>" [routerLink]="['/<#= (!string.IsNullOrEmpty(relationModel.NamePlural) ? relationModel.NamePlural : relationModel.Name + "s").ToLower() #>', <#= model.Name.ToCamelCase() #>.<#= relation.Name.ToCamelCase() #>.id]" class="cursor--pointer">
          {{ <#= model.Name.ToCamelCase() #>.<#= relation.Name.ToCamelCase() #>.<#= !string.IsNullOrEmpty(model.DisplayField) ? model.DisplayField.ToCamelCase() : "id" #> }}
        </span>
      </div>
<# } #>
  </div>
</div>
