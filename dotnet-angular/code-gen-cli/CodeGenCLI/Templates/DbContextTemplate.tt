<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CodeGenCLI.CodeGenClasses" #>
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using <#= !string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name #>.Models;
using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;

namespace <#= !string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name #>.DAL
{
    public class <#= config.Name #>Context : DbContext
	{
		public <#= config.Name #>Context(DbContextOptions<<#= config.Name #>Context> options) : base(options)
        {
        }

<# foreach (CodeGenModel model in config.Models) { #>
		public DbSet<<#= model.Name #>> <#= !string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s" #> { get; set; }
<# } #>

		protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                IConfigurationRoot configuration = new ConfigurationBuilder()
                    .SetBasePath(Directory.GetCurrentDirectory())
                    .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)
                    .AddJsonFile("appsettings.Development.json", optional: true, reloadOnChange: true)
                    .Build();
                optionsBuilder.UseSqlServer(configuration.GetConnectionString("<#= config.Name #>Context"));
            }
        }

		protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
<# CodeGenModel lastModel = config.Models.Last(); #>
<# foreach (CodeGenModel model in config.Models) { #>
			#region <#= !string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s" #>

            // Soft delete query filter
            modelBuilder.Entity<<#= model.Name #>>().HasQueryFilter(e => e.DeletedOn == null);

            // Table
            modelBuilder.Entity<<#= model.Name #>>().ToTable("<#= !string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s" #>");

            // Required properties
<# foreach (CodeGenModelProperty property in model.Properties.Where(p => p.Required)) { #>
            modelBuilder.Entity<<#= model.Name #>>().Property(e => e.<#= property.Name #>).IsRequired();
<# } #>

            #endregion
<# if (!model.Equals(lastModel)) { #>

<# } #>
<# } #>
		}

		public override int SaveChanges()
        {
            SoftDeleteLogic();
            TimeStampsLogic();

            return base.SaveChanges();
        }

        public override Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken))
        {
            SoftDeleteLogic();
            TimeStampsLogic();

            return base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);
        }

        private void SoftDeleteLogic()
        {
            foreach (var entry in ChangeTracker.Entries())
            {
                // Models that have soft delete
                if (
<# foreach (CodeGenModel model in config.Models) { #>
					entry.Entity.GetType() == typeof(<#= model.Name #>)<# if (!model.Equals(lastModel)) { #> ||<# } #>
<# } #>
				)
                {
                    switch (entry.State)
                    {
                        case EntityState.Added:
                            entry.CurrentValues["DeletedOn"] = null;
                            break;
                        case EntityState.Deleted:
                            entry.State = EntityState.Modified;
                            entry.CurrentValues["DeletedOn"] = DateTime.Now;
                            break;
                    }
                }
            }
        }

        private void TimeStampsLogic()
        {
            foreach (var entry in ChangeTracker.Entries())
            {
                // Models that have soft delete
                if (
<# foreach (CodeGenModel model in config.Models) { #>
					entry.Entity.GetType() == typeof(<#= model.Name #>)<# if (!model.Equals(lastModel)) { #> ||<# } #>
<# } #>
				)
                {
                    switch (entry.State)
                    {
                        case EntityState.Added:
                            entry.CurrentValues["CreatedOn"] = DateTime.Now;
                            entry.CurrentValues["ModifiedOn"] = DateTime.Now;
                            break;
                        case EntityState.Modified:
                            entry.CurrentValues["ModifiedOn"] = DateTime.Now;
                            break;
                    }
                }
            }
        }
	}
}
