<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CodeGenCLI.CodeGenClasses" #>
using System;
using System.Collections.Generic;

namespace <#= !string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name #>.Models
{
	/// <summary>
    /// <#= model.Name #> model
<# if (!string.IsNullOrEmpty(model.Description)) { #>
    /// <#= model.Description #>.
<# } #>
    /// </summary>
    public class <#= model.Name #>
    {
		public <#= model.Name #>()
        {
<# if (model.Relations.ToList().Count > 0) { #>
            // Relations
<# if (model.Relations.Where(r => r.Type == "one-to-many").ToList().Count > 0) { #>

			//// One-to-many
<# foreach (CodeGenModelRelation relation in model.Relations.Where(r => r.Type == "one-to-many")) { #>
			this.<#= relation.Name #> = new List<<#= relation.Model #>>();
<# } #>
<# } #>
<# if (model.Relations.Where(r => r.Type == "many-to-many").ToList().Count > 0) { #>

			//// Many-to-many
<# foreach (CodeGenModelRelation relation in model.Relations.Where(r => r.Type == "many-to-many")) { #>
			this.<#= relation.Through #> = new List<<#= relation.Through #>>();
<# } #>
<# } #>
<# } #>
        }

		// Properties

		/// <summary>
        /// The identifier of <#= model.Name #>.
        /// </summary>
		public Guid Id { get; set; }
<# foreach (CodeGenModelProperty property in model.Properties) { #>

<# if (!string.IsNullOrEmpty(property.Description)) { #>
		/// <summary>
        /// <#= property.Description #>.
        /// </summary>
<# } else { #>
		/// <summary>
        /// The <#= property.Name #> property of <#= model.Name #>.
        /// </summary>
<# } #>
		public <#= property.Type #> <#= property.Name #> { get; set; }
<# } #>

<# if (model.Relations.ToList().Count > 0) { #>
		// Relations
<# if (model.Relations.Where(r => r.Type == "many-to-one").ToList().Count > 0) { #>

		//// Many-to-one

<# foreach (CodeGenModelRelation relation in model.Relations.Where(r => r.Type == "many-to-one")) { #>
	    /// <summary>
        /// The related foreign key <#= relation.Name #>Id for <#= relation.Name #> of <#= model.Name #>.
        /// </summary>
		public Guid<#= (relation.Required ? "" : "?") #> <#= relation.Model #>Id { get; set; }

		/// <summary>
        /// The related <#= relation.Name #> of <#= model.Name #>.
        /// </summary>
		public <#= relation.Model #> <#= relation.Name #> { get; set; }

<# } #>
<# } #>
<# if (model.Relations.Where(r => r.Type == "one-to-many").ToList().Count > 0) { #>

		//// One-to-many

<# foreach (CodeGenModelRelation relation in model.Relations.Where(r => r.Type == "one-to-many")) { #>
		/// <summary>
        /// The related <#= relation.Name #> of <#= model.Name #>.
        /// </summary>
		public IList<<#= relation.Model #>> <#= relation.Name #> { get; set; }
<# } #>
<# } #>
<# if (model.Relations.Where(r => r.Type == "many-to-many").ToList().Count > 0) { #>

		//// Many-to-many

<# foreach (CodeGenModelRelation relation in model.Relations.Where(r => r.Type == "many-to-many")) { #>
		/// <summary>
        /// The related <#= relation.Name #> of <#= model.Name #>.
        /// </summary>
		public IList<<#= relation.Through #>> <#= relation.Through #> { get; set; }
<# } #>
<# } #>
<# } #>

		// Generic properties

		/// <summary>
        /// The date and time of when the record is created
        /// </summary>
		public DateTime CreatedOn { get; set; }

		/// <summary>
        /// The date and time of when the record is modified
        /// </summary>
		public DateTime ModifiedOn { get; set; }

		/// <summary>
        /// The date and time of when the record is (soft) deleted
        /// </summary>
		public DateTime? DeletedOn { get; set; }

		// TODO:
		//public Guid CreatedByUserId { get; set; }
		//public Guid ModifiedByUserId { get; set; }
		//public Guid TenantId { get; set; }
    }
}
