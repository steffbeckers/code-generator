<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CodeGenCLI.CodeGenClasses" #>
<#@ import namespace="CodeGenCLI.Extensions" #>
using AutoMapper;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using <#= !string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name #>.BLL;
using <#= !string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name #>.Models;
using <#= !string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name #>.ViewModels;

namespace <#= !string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name #>.Controllers
{
	/// <summary>
	/// The <#= !string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s" #> controller.
	/// </summary>
    [Route("api/[controller]")]
    [ApiController]
	[Produces("application/json")]
    public class <#= !string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s" #>Controller : ControllerBase
    {
        private readonly ILogger<<#= !string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s" #>Controller> logger;
        private readonly IMapper mapper;
        private readonly <#= model.Name #>BLL bll;

		/// <summary>
		/// The constructor of the <#= !string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s" #> controller.
		/// </summary>
        public <#= !string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s" #>Controller(
            ILogger<<#= !string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s" #>Controller> logger,
			IMapper mapper,
            <#= model.Name #>BLL bll
        )
        {
            this.logger = logger;
			this.mapper = mapper;
            this.bll = bll;
        }

        // GET: api/<#= (!string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s").ToLower() #>
		/// <summary>
		/// Retrieves all <#= (!string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s").ToLower() #>.
		/// </summary>
        [HttpGet]
        public async Task<ActionResult<IEnumerable<<#= model.Name #>VM>>> Get<#= !string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s" #>()
        {
            IEnumerable<<#= model.Name #>> <#= !string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural.ToLower() : (model.Name + "s").ToLower() #> = await this.bll.GetAll<#= !string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s" #>Async();

			// Mapping
            return Ok(this.mapper.Map<IEnumerable<<#= model.Name #>>, List<<#= model.Name #>VM>>(<#= !string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural.ToLower() : (model.Name + "s").ToLower() #>));
        }

        // GET: api/<#= (!string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s").ToLower() #>/{id}
		/// <summary>
		/// Retrieves a specific <#= model.Name.ToLower() #>.
		/// </summary>
		/// <param name="id"></param>
        [HttpGet("{id}")]
        public async Task<ActionResult<<#= model.Name #>VM>> Get<#= model.Name #>([FromRoute] Guid id)
        {
            <#= model.Name #> <#= model.Name.ToLower() #> = await this.bll.Get<#= model.Name #>ByIdAsync(id);
            if (<#= model.Name.ToLower() #> == null)
            {
                return NotFound();
            }

			// Mapping
            return Ok(this.mapper.Map<<#= model.Name #>, <#= model.Name #>VM>(<#= model.Name.ToLower() #>));
        }

        // POST: api/<#= (!string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s").ToLower() #>
		/// <summary>
		/// Creates a new <#= model.Name.ToLower() #>.
		/// </summary>
		/// <param name="<#= model.Name.ToLower() #>VM"></param>
        [HttpPost]
        public async Task<ActionResult<<#= model.Name #>VM>> Create<#= model.Name #>([FromBody] <#= model.Name #>VM <#= model.Name.ToLower() #>VM)
        {
			// Validation
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            // Mapping
            <#= model.Name #> <#= model.Name.ToLower() #> = this.mapper.Map<<#= model.Name #>VM, <#= model.Name #>>(<#= model.Name.ToLower() #>VM);

            <#= model.Name.ToLower() #> = await this.bll.Create<#= model.Name #>Async(<#= model.Name.ToLower() #>);

			// Mapping
            return CreatedAtAction(
				"Get<#= model.Name #>",
				new { id = <#= model.Name.ToLower() #>.Id },
				this.mapper.Map<<#= model.Name #>, <#= model.Name #>VM>(<#= model.Name.ToLower() #>)
			);
        }

		// PUT: api/<#= (!string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s").ToLower() #>/{id}
		/// <summary>
		/// Updates a specific <#= model.Name.ToLower() #>.
		/// </summary>
		/// <param name="id"></param>
		/// <param name="<#= model.Name.ToCamelCase() #>VM"></param>
        [HttpPut("{id}")]
        public async Task<ActionResult<<#= model.Name #>VM>> Update<#= model.Name #>([FromRoute] Guid id, [FromBody] <#= model.Name #>VM <#= model.Name.ToCamelCase() #>VM)
        {
			// Validation
            if (!ModelState.IsValid || id != <#= model.Name.ToCamelCase() #>VM.Id)
            {
                return BadRequest(ModelState);
            }

			// Mapping
            <#= model.Name #> <#= model.Name.ToCamelCase() #> = this.mapper.Map<<#= model.Name #>VM, <#= model.Name #>>(<#= model.Name.ToCamelCase() #>VM);

            <#= model.Name.ToCamelCase() #> = await this.bll.Update<#= model.Name #>Async(<#= model.Name.ToCamelCase() #>);

			// Mapping
			return Ok(this.mapper.Map<<#= model.Name #>, <#= model.Name #>VM>(<#= model.Name.ToCamelCase() #>));
        }

<# foreach (CodeGenModelRelation relation in model.Relations.Where(r => r.Type == "many-to-many" && !string.IsNullOrEmpty(r.Through))) { #>
        // PUT: api/<#= (!string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s").ToLower() #>/<#= relation.Name.ToLower() #>/link
		/// <summary>
		/// Links a specific <#= relation.Model.ToLower() #> to <#= model.Name.ToLower() #>.
		/// </summary>
		/// <param name="<#= relation.Through.ToCamelCase() #>"></param>
        [HttpPut("<#= relation.Name #>/Link")]
        public async Task<ActionResult<<#= model.Name #>VM>> Link<#= relation.Model #>To<#= model.Name #>([FromBody] <#= relation.Through #> <#= relation.Through.ToCamelCase() #>)
        {
			// Validation
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            <#= model.Name #> <#= model.Name.ToCamelCase() #> = await this.bll.Link<#= relation.Model #>To<#= model.Name #>Async(<#= relation.Through.ToCamelCase() #>);

            // Mapping
            return Ok(this.mapper.Map<<#= model.Name #>, <#= model.Name #>VM>(<#= model.Name.ToCamelCase() #>));
        }

        // PUT: api/<#= (!string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s").ToLower() #>/<#= relation.Name.ToLower() #>/unlink
		/// <summary>
		/// Unlinks a specific <#= relation.Model.ToLower() #> from <#= model.Name.ToLower() #>.
		/// </summary>
		/// <param name="<#= relation.Through.ToCamelCase() #>"></param>
        [HttpPut("<#= relation.Name #>/Unlink")]
        public async Task<ActionResult<<#= model.Name #>VM>> Unlink<#= relation.Model #>From<#= model.Name #>([FromBody] <#= relation.Through #> <#= relation.Through.ToCamelCase() #>)
        {
			// Validation
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            <#= model.Name #> <#= model.Name.ToCamelCase() #> = await this.bll.Unlink<#= relation.Model #>From<#= model.Name #>Async(<#= relation.Through.ToCamelCase() #>);

            // Mapping
            return Ok(this.mapper.Map<<#= model.Name #>, <#= model.Name #>VM>(<#= model.Name.ToCamelCase() #>));
        }

<# } #>
        // DELETE: api/<#= (!string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s").ToLower() #>/{id}
		/// <summary>
		/// Deletes a specific <#= model.Name.ToLower() #>.
		/// </summary>
		/// <param name="id"></param>
        [HttpDelete("{id}")]
        public async Task<ActionResult<<#= model.Name #>VM>> Delete<#= model.Name #>([FromRoute] Guid id)
        {
            // Retrieve existing <#= model.Name.ToLower() #>
            <#= model.Name #> <#= model.Name.ToLower() #> = await this.bll.Get<#= model.Name #>ByIdAsync(id);
            if (<#= model.Name.ToLower() #> == null)
            {
                return NotFound();
            }

            await this.bll.Delete<#= model.Name #>Async(<#= model.Name.ToLower() #>);

            // Mapping
            return Ok(this.mapper.Map<<#= model.Name #>, <#= model.Name #>VM>(<#= model.Name.ToLower() #>));
        }
    }
}
