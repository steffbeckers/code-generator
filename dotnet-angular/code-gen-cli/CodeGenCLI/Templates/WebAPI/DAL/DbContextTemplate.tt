<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CodeGenCLI.CodeGenClasses" #>
<# if (config.Authentication.Enabled) { #>
using Microsoft.AspNetCore.Identity;
using System.Security.Claims;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
<# } #>
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using System;
using System.Threading;
using System.Threading.Tasks;
using <#= !string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name #>.Models;

namespace <#= !string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name #>.DAL
{
<# if (config.Authentication.Enabled) { #>
    public class TestContext : IdentityDbContext<
        User,
        IdentityRole<Guid>,
        Guid,
        IdentityUserClaim<Guid>,
        IdentityUserRole<Guid>,
        IdentityUserLogin<Guid>,
        IdentityRoleClaim<Guid>,
        IdentityUserToken<Guid>
    >
<# } else { #>
    public class <#= config.Name #>Context : DbContext
<# } #>
	{
        private readonly IConfiguration configuration;
<# if (config.Authentication.Enabled) { #>
        private readonly IHttpContextAccessor httpContextAccessor;
<# } #>

		public <#= config.Name #>Context(
<# if (config.Authentication.Enabled) { #>
            IHttpContextAccessor httpContextAccessor,
<# } #>
            IConfiguration configuration
        ) : base()
        {
            this.configuration = configuration;
<# if (config.Authentication.Enabled) { #>
            this.httpContextAccessor = httpContextAccessor;
<# } #>
        }

<# foreach (CodeGenModel model in config.Models) { #>
<# if (model.ManyToMany) { #>
		public DbSet<<#= model.Name #>> <#= model.Name #> { get; set; }
<# } else { #>
		public DbSet<<#= model.Name #>> <#= !string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s" #> { get; set; }
<# } #>
<# } #>

		protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            base.OnConfiguring(optionsBuilder);

            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(configuration.GetConnectionString("<#= config.Name #>Context"));
            }
        }

		protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
<# if (config.Authentication.Enabled) { #>
            base.OnModelCreating(modelBuilder);

            #region Identity

            modelBuilder.Entity<User>(e => e.ToTable("Users"));
            modelBuilder.Entity<IdentityRole<Guid>>(e => e.ToTable("Roles"));
            modelBuilder.Entity<IdentityUserRole<Guid>>(e =>
            {
                e.ToTable("UserRoles");
                // In case you changed the TKey type
                e.HasKey(key => new { key.UserId, key.RoleId });
            });
            modelBuilder.Entity<IdentityUserClaim<Guid>>(e => e.ToTable("UserClaims"));
            modelBuilder.Entity<IdentityUserLogin<Guid>>(e =>
            {
                e.ToTable("UserLogins");
                // In case you changed the TKey type
                e.HasKey(key => new { key.ProviderKey, key.LoginProvider });       
            });
            modelBuilder.Entity<IdentityRoleClaim<Guid>>(e => e.ToTable("RoleClaims"));
            modelBuilder.Entity<IdentityUserToken<Guid>>(e =>
            {
                e.ToTable("UserTokens");
                // In case you changed the TKey type
                e.HasKey(key => new { key.UserId, key.LoginProvider, key.Name });
            });

            #endregion

<# } #>
<# CodeGenModel lastModel = config.Models.Last(); #>
<# foreach (CodeGenModel model in config.Models) { #>
<# if (model.ManyToMany) { #>
			#region <#= model.Name #>
<# } else { #>
			#region <#= !string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s" #>
<# } #>

            // Soft delete query filter
            modelBuilder.Entity<<#= model.Name #>>().HasQueryFilter(e => e.DeletedOn == null);

            // Table
<# if (model.ManyToMany) { #>
			modelBuilder.Entity<<#= model.Name #>>().ToTable("<#= model.Name #>");
<# } else { #>
			modelBuilder.Entity<<#= model.Name #>>().ToTable("<#= !string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s" #>");
<# } #>

			// Key
			modelBuilder.Entity<<#= model.Name #>>().HasKey(e => e.<#= !string.IsNullOrEmpty(model.Key) ? model.Key : "Id" #>);

            // Required properties
<# foreach (CodeGenModelProperty property in model.Properties.Where(p => p.Required)) { #>
            modelBuilder.Entity<<#= model.Name #>>().Property(e => e.<#= property.Name #>).IsRequired();
<# } #>
<# foreach (CodeGenModelRelation relation in model.Relations.Where(p => p.Required)) { #>
            modelBuilder.Entity<<#= model.Name #>>().Property(e => e.<#= relation.Model #>Id).IsRequired();
<# } #>
<# if (config.Authentication.Enabled) { #>

            // User
            modelBuilder.Entity<<#= model.Name #>>()
                .HasOne(x => x.CreatedByUser)
                .WithMany()
                .OnDelete(DeleteBehavior.NoAction);

            modelBuilder.Entity<<#= model.Name #>>()
                .HasOne(x => x.ModifiedByUser)
                .WithMany()
                .OnDelete(DeleteBehavior.NoAction);
<# } #>

            #endregion
<# if (!model.Equals(lastModel)) { #>

<# } #>
<# } #>
		}

		public override int SaveChanges()
        {
            SoftDeleteLogic();
            TimestampsLogic();
<# if (config.Authentication.Enabled) { #>
            UserInfoDataLogic();
<# } #>

            return base.SaveChanges();
        }

        public override Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken))
        {
            SoftDeleteLogic();
            TimestampsLogic();
<# if (config.Authentication.Enabled) { #>
            UserInfoDataLogic();
<# } #>

            return base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);
        }

        private void SoftDeleteLogic()
        {
            foreach (var entry in ChangeTracker.Entries())
            {
                // Models that have soft delete
                if (
<# foreach (CodeGenModel model in config.Models) { #>
<# if (!model.Equals(lastModel)) { #>
					entry.Entity.GetType() == typeof(<#= model.Name #>) ||
<# } else { #>
					entry.Entity.GetType() == typeof(<#= model.Name #>)
<# } #>
<# } #>
				)
                {
                    switch (entry.State)
                    {
                        case EntityState.Added:
                            entry.CurrentValues["DeletedOn"] = null;
                            break;
                        case EntityState.Deleted:
                            entry.State = EntityState.Modified;
                            entry.CurrentValues["DeletedOn"] = DateTime.Now;
                            break;
                    }
                }
            }
        }

        private void TimestampsLogic()
        {
            foreach (var entry in ChangeTracker.Entries())
            {
                // Models that have soft delete
                if (
<# foreach (CodeGenModel model in config.Models) { #>
<# if (!model.Equals(lastModel)) { #>
					entry.Entity.GetType() == typeof(<#= model.Name #>) ||
<# } else { #>
					entry.Entity.GetType() == typeof(<#= model.Name #>)
<# } #>
<# } #>
				)
                {
                    switch (entry.State)
                    {
                        case EntityState.Added:
                            entry.CurrentValues["CreatedOn"] = DateTime.Now;
                            entry.CurrentValues["ModifiedOn"] = DateTime.Now;
                            break;
                        case EntityState.Modified:
                            entry.CurrentValues["ModifiedOn"] = DateTime.Now;
                            break;
                    }
                }
            }
        }
<# if (config.Authentication.Enabled) { #>

        private void UserInfoDataLogic()
        {
            string userIdString = this.httpContextAccessor?.HttpContext?.User?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userIdString))
            {
                Guid userId = Guid.Parse(userIdString);

                foreach (var entry in ChangeTracker.Entries())
                {
                    Type entityType = entry.Entity.GetType();
                    if (
<# foreach (CodeGenModel model in config.Models) { #>
<# if (!model.Equals(lastModel)) { #>
					    entry.Entity.GetType() == typeof(<#= model.Name #>) ||
<# } else { #>
					    entry.Entity.GetType() == typeof(<#= model.Name #>)
<# } #>
<# } #>
                    )
                    {
                        switch (entry.State)
                        {
                            case EntityState.Added:
                                entry.CurrentValues["CreatedByUserId"] = userId;
                                entry.CurrentValues["ModifiedByUserId"] = userId;
                                break;
                            case EntityState.Modified:
                                entry.CurrentValues["ModifiedByUserId"] = userId;
                                break;
                        }
                    }
                }
            }
        }
<# } #>
	}
}
