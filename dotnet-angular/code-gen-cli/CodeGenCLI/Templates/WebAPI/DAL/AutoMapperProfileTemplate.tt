<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CodeGenCLI.CodeGenClasses" #>
<# List<CodeGenModel> manyToManyModels = config.Models.Where(m => m.ManyToMany).ToList(); #>
using AutoMapper;
using System;
using System.Collections.Generic;
using System.Linq;
using <#= !string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name #>.Models;
using <#= !string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name #>.ViewModels;
<# if (config.Authentication.Enabled) { #>
using <#= !string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name #>.ViewModels.Identity;
<# } #>

namespace <#= !string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name #>.DAL
{
	/// <summary>
	/// Profile for mapping models to/from view models with AutoMapper.
	/// </summary>
    public class AutoMapperProfile : Profile
    {
		/// <summary>
		/// The constructor of AutoMapperProfile.
		/// </summary>
        public AutoMapperProfile()
        {
<# CodeGenModel lastModel = config.Models.Last(); #>
<# foreach (CodeGenModel model in config.Models.Where(m => !m.ManyToMany)) { #>
<# List<CodeGenModel> manyToManysWithModel = manyToManyModels.Where(m => m.Relations.SingleOrDefault(r => r.Model == model.Name) != null).ToList(); #>
            // <#= !string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s" #>
			CreateMap<<#= model.Name #>, <#= model.Name #>VM>()<#= (manyToManysWithModel.Count == 0 ? ";" : "") #>
<# foreach (CodeGenModel manyToManyWithModel in manyToManysWithModel) { #>
<# CodeGenModelRelation manyToManyOtherRelation = manyToManyWithModel.Relations.First(r => r.Model != model.Name); #>
<# CodeGenModel manyToManyOtherRelationModel = config.Models.First(x => x.Name == manyToManyOtherRelation.Model); #>
                .ForMember(
                    x => x.<#= !string.IsNullOrEmpty(manyToManyOtherRelationModel.NamePlural) ? manyToManyOtherRelationModel.NamePlural : manyToManyOtherRelationModel.Name + "s" #>,
                    x => x.MapFrom(
                        y => y.<#= manyToManyWithModel.Name #>.Select(z => z.<#= manyToManyOtherRelation.Model #>)
                    )
                );
<# } #>
            CreateMap<<#= model.Name #>VM, <#= model.Name #>>()<#= (manyToManysWithModel.Count == 0 ? ";" : "") #>
<# foreach (CodeGenModel manyToManyWithModel in manyToManysWithModel) { #>
<# CodeGenModelRelation manyToManyOtherRelation = manyToManyWithModel.Relations.First(r => r.Model != model.Name); #>
<# CodeGenModel manyToManyOtherRelationModel = config.Models.First(x => x.Name == manyToManyOtherRelation.Model); #>
                .ForMember(
                    x => x.<#= manyToManyWithModel.Name #>,
                    x => {
                        x.PreCondition(z => z.<#= manyToManyOtherRelation.Model #>Id != null);
                        x.MapFrom(
                            y => new List<<#= manyToManyWithModel.Name #>>() {
                                new <#= manyToManyWithModel.Name #>()
                                {
                                    <#= manyToManyOtherRelation.Model #>Id = (Guid)y.<#= manyToManyOtherRelation.Model #>Id<#= (manyToManyWithModel.Properties.Count > 0 ? "," : "") #>
<# foreach (CodeGenModelProperty manyToManyWithModelProperty in manyToManyWithModel.Properties) { #>
                                    <#= manyToManyWithModelProperty.Name #> = y.<#= manyToManyOtherRelation.Model #><#= manyToManyWithModelProperty.Name #>
<# } #>
                                }
                            }
                        );
                    }
                );
<# } #>
<# if (!model.Equals(lastModel)) { #>

<# } #>
<# } #>
<# if (config.Authentication.Enabled) { #>
            // Users
			CreateMap<User, UserVM>();
            CreateMap<UserVM, User>();
<# } #>
        }
    }
}
