// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CodeGenCLI.Templates.WebAPI.DAL
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\DAL\RepositoryBaseTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class RepositoryBaseTemplate : RepositoryBaseTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using Microsoft.EntityFrameworkCore;\r\nusing System;\r\nusing System.Collections.Gen" +
                    "eric;\r\nusing System.Linq;\r\nusing System.Linq.Expressions;\r\nusing System.Threadin" +
                    "g.Tasks;\r\n\r\nnamespace ");
            
            #line 13 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\DAL\RepositoryBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".DAL\r\n{\r\n    interface IRepository<TEntity> where TEntity : class\r\n    {\r\n       " +
                    " // Create\r\n        TEntity Insert(TEntity entity);\r\n        Task<TEntity> Inser" +
                    "tAsync(TEntity entity);\r\n\r\n        // Read\r\n        TEntity GetById(Guid id);\r\n " +
                    "       Task<TEntity> GetByIdAsync(Guid id);\r\n\r\n        IEnumerable<TEntity> Get(" +
                    "\r\n            Expression<Func<TEntity, bool>> filter = null,\r\n            Func<I" +
                    "Queryable<TEntity>, IOrderedQueryable<TEntity>> orderBy = null,\r\n            str" +
                    "ing includeProperties = \"\"\r\n        );\r\n        Task<IEnumerable<TEntity>> GetAs" +
                    "ync(\r\n            Expression<Func<TEntity, bool>> filter = null,\r\n            Fu" +
                    "nc<IQueryable<TEntity>, IOrderedQueryable<TEntity>> orderBy = null,\r\n           " +
                    " string includeProperties = \"\"\r\n        );\r\n\r\n        // Update\r\n        TEntity" +
                    " Update(TEntity entityToUpdate);\r\n        Task<TEntity> UpdateAsync(TEntity enti" +
                    "tyToUpdate);\r\n\r\n        // Delete\r\n        void Delete(Guid id);\r\n        Task D" +
                    "eleteAsync(Guid id);\r\n\r\n        void Delete(TEntity entity);\r\n        Task Delet" +
                    "eAsync(TEntity entity);\r\n    }\r\n\r\n    public class Repository<TEntity> : IReposi" +
                    "tory<TEntity> where TEntity : class\r\n    {\r\n        protected readonly DbContext" +
                    " context;\r\n        private readonly DbSet<TEntity> dbSet;\r\n\r\n        public Repo" +
                    "sitory(DbContext context)\r\n        {\r\n            this.context = context;\r\n     " +
                    "       dbSet = context.Set<TEntity>();\r\n        }\r\n\r\n        public virtual TEnt" +
                    "ity GetById(Guid id)\r\n        {\r\n            return dbSet.Find(id);\r\n        }\r\n" +
                    "\r\n        public virtual async Task<TEntity> GetByIdAsync(Guid id)\r\n        {\r\n " +
                    "           return await dbSet.FindAsync(id);\r\n        }\r\n\r\n        public virtua" +
                    "l IEnumerable<TEntity> Get(Expression<Func<TEntity, bool>> filter = null, Func<I" +
                    "Queryable<TEntity>, IOrderedQueryable<TEntity>> orderBy = null, string includePr" +
                    "operties = \"\")\r\n        {\r\n            IQueryable<TEntity> query = dbSet;\r\n\r\n   " +
                    "         if (filter != null)\r\n            {\r\n                query = query.Where" +
                    "(filter);\r\n            }\r\n\r\n            foreach (var includeProperty in includeP" +
                    "roperties.Split(new[] { \',\' }, StringSplitOptions.RemoveEmptyEntries))\r\n        " +
                    "    {\r\n                query = query.Include(includeProperty);\r\n            }\r\n\r" +
                    "\n            if (orderBy != null)\r\n            {\r\n                return orderBy" +
                    "(query).ToList();\r\n            }\r\n\r\n            return query.ToList();\r\n        " +
                    "}\r\n\r\n        public virtual async Task<IEnumerable<TEntity>> GetAsync(Expression" +
                    "<Func<TEntity, bool>> filter = null, Func<IQueryable<TEntity>, IOrderedQueryable" +
                    "<TEntity>> orderBy = null, string includeProperties = \"\")\r\n        {\r\n          " +
                    "  IQueryable<TEntity> query = dbSet;\r\n\r\n            if (filter != null)\r\n       " +
                    "     {\r\n                query = query.Where(filter);\r\n            }\r\n\r\n         " +
                    "   foreach (var includeProperty in includeProperties.Split(new[] { \',\' }, String" +
                    "SplitOptions.RemoveEmptyEntries))\r\n            {\r\n                query = query." +
                    "Include(includeProperty);\r\n            }\r\n\r\n            if (orderBy != null)\r\n  " +
                    "          {\r\n                return await orderBy(query).ToListAsync();\r\n       " +
                    "     }\r\n\r\n            return await query.ToListAsync();\r\n        }\r\n\r\n        pu" +
                    "blic virtual TEntity Insert(TEntity entity)\r\n        {\r\n            dbSet.Add(en" +
                    "tity);\r\n            context.SaveChanges();\r\n\r\n            return entity;\r\n      " +
                    "  }\r\n\r\n        public virtual async Task<TEntity> InsertAsync(TEntity entity)\r\n " +
                    "       {\r\n            await dbSet.AddAsync(entity);\r\n            await context.S" +
                    "aveChangesAsync();\r\n\r\n            return entity;\r\n        }\r\n\r\n        public vi" +
                    "rtual TEntity Update(TEntity entityToUpdate)\r\n        {\r\n            dbSet.Attac" +
                    "h(entityToUpdate);\r\n            context.Entry(entityToUpdate).State = EntityStat" +
                    "e.Modified;\r\n            context.SaveChanges();\r\n\r\n            return entityToUp" +
                    "date;\r\n        }\r\n\r\n        public virtual async Task<TEntity> UpdateAsync(TEnti" +
                    "ty entityToUpdate)\r\n        {\r\n            dbSet.Attach(entityToUpdate);\r\n      " +
                    "      context.Entry(entityToUpdate).State = EntityState.Modified;\r\n            a" +
                    "wait context.SaveChangesAsync();\r\n\r\n            return entityToUpdate;\r\n        " +
                    "}\r\n\r\n        public virtual void Delete(Guid id)\r\n        {\r\n            TEntity" +
                    " entityToDelete = dbSet.Find(id);\r\n            Delete(entityToDelete);\r\n        " +
                    "}\r\n\r\n        public virtual async Task DeleteAsync(Guid id)\r\n        {\r\n        " +
                    "    TEntity entityToDelete = await dbSet.FindAsync(id);\r\n            await Delet" +
                    "eAsync(entityToDelete);\r\n        }\r\n\r\n        public virtual void Delete(TEntity" +
                    " entityToDelete)\r\n        {\r\n            if (context.Entry(entityToDelete).State" +
                    " == EntityState.Detached)\r\n            {\r\n                dbSet.Attach(entityToD" +
                    "elete);\r\n            }\r\n\r\n            dbSet.Remove(entityToDelete);\r\n           " +
                    " context.SaveChanges();\r\n        }\r\n\r\n        public virtual async Task DeleteAs" +
                    "ync(TEntity entityToDelete)\r\n        {\r\n            if (context.Entry(entityToDe" +
                    "lete).State == EntityState.Detached)\r\n            {\r\n                dbSet.Attac" +
                    "h(entityToDelete);\r\n            }\r\n\r\n            dbSet.Remove(entityToDelete);\r\n" +
                    "            await context.SaveChangesAsync();\r\n        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class RepositoryBaseTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
