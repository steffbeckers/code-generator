<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CodeGenCLI.CodeGenClasses" #>
<#@ import namespace="CodeGenCLI.Extensions" #>
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using <#= !string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name #>.DAL.Repositories;
using <#= !string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name #>.Models;

namespace <#= !string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name #>.BLL
{
	/// <summary>
	/// The business logic layer for <#= !string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s" #>.
	/// </summary>
    public class <#= model.Name #>BLL
    {
        private readonly <#= model.Name #>Repository <#= model.Name.ToLower() #>Repository;
<# foreach (CodeGenModelRelation relation in model.Relations.Where(r => r.Type == "many-to-many" && !string.IsNullOrEmpty(r.Through))) { #>
        private readonly <#= relation.Through #>Repository <#= relation.Through.ToCamelCase() #>Repository;
<# } #>

		/// <summary>
		/// The constructor of the <#= model.Name #> business logic layer.
		/// </summary>
        public <#= model.Name #>BLL(
			<#= model.Name #>Repository <#= model.Name.ToLower() #>Repository<#= (model.Relations.Where(r => r.Type == "many-to-many" && !string.IsNullOrEmpty(r.Through)).ToList().Count() > 0 ? "," : "") #>
<# foreach (CodeGenModelRelation relation in model.Relations.Where(r => r.Type == "many-to-many" && !string.IsNullOrEmpty(r.Through))) { #>
<# CodeGenModelRelation lastModelManyToManyRelation = model.Relations.Where(r => r.Type == "many-to-many" && !string.IsNullOrEmpty(r.Through)).Last(); #>
			<#= relation.Through #>Repository <#= relation.Through.ToCamelCase() #>Repository<#= (!relation.Equals(lastModelManyToManyRelation) ? "," : "") #>
<# } #>
		)
        {
            this.<#= model.Name.ToLower() #>Repository = <#= model.Name.ToLower() #>Repository;
<# foreach (CodeGenModelRelation relation in model.Relations.Where(r => r.Type == "many-to-many" && !string.IsNullOrEmpty(r.Through))) { #>
			this.<#= relation.Through.ToCamelCase() #>Repository = <#= relation.Through.ToCamelCase() #>Repository;
<# } #>
        }

		/// <summary>
		/// Retrieves all <#= (!string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s").ToLower() #>.
		/// </summary>
		public async Task<IEnumerable<<#= model.Name #>>> GetAll<#= !string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s" #>Async()
        {
			// #-#-# {83B8AA9F-713A-42FB-ADE1-8A4AA43886C8}
			// Before retrieval
			// #-#-#

            return await this.<#= model.Name.ToLower() #>Repository.GetAsync();
        }

		/// <summary>
		/// Retrieves one <#= model.Name.ToLower() #> by Id.
		/// </summary>
		public async Task<<#= model.Name #>> Get<#= model.Name #>ByIdAsync(Guid id)
        {
			// #-#-# {F838CE2A-D0FB-4F8A-A826-0D653DEECB2B}
			// Before retrieval
			// #-#-#

            return await this.<#= model.Name.ToLower() #>Repository.GetWithLinkedEntitiesByIdAsync(id);
        }

		/// <summary>
		/// Creates a new <#= model.Name.ToLower() #> record.
		/// </summary>
        public async Task<<#= model.Name #>> Create<#= model.Name #>Async(<#= model.Name #> <#= model.Name.ToLower() #>)
        {
			// Trimming strings
<# foreach (CodeGenModelProperty property in model.Properties.Where(p => p.Type == "string")) { #>
            <#= model.Name.ToLower() #>.<#= property.Name #> = <#= model.Name.ToLower() #>.<#= property.Name #>.Trim();
<# } #>

			// #-#-# {D4775AF3-4BFA-496A-AA82-001028A22DD6}
			// Before creation
			// #-#-#

			<#= model.Name.ToLower() #> = await this.<#= model.Name.ToLower() #>Repository.InsertAsync(<#= model.Name.ToLower() #>);

			// #-#-# {1972C619-D2F2-48FD-8474-3A69621B1F78}
			// After creation
			// #-#-#

            return <#= model.Name.ToLower() #>;
        }

		/// <summary>
		/// Updates an existing <#= model.Name.ToLower() #> record by Id.
		/// </summary>
        public async Task<<#= model.Name #>> Update<#= model.Name #>Async(Guid id, <#= model.Name #> <#= model.Name.ToLower() #>Update)
        {
            // Retrieve existing
            <#= model.Name #> <#= model.Name.ToLower() #> = await this.<#= model.Name.ToLower() #>Repository.GetByIdAsync(id);
            if (<#= model.Name.ToLower() #> == null)
            {
                return null;
            }

			// Trimming strings
<# foreach (CodeGenModelProperty property in model.Properties.Where(p => p.Type == "string")) { #>
            <#= model.Name.ToLower() #>Update.<#= property.Name #> = <#= model.Name.ToLower() #>Update.<#= property.Name #>.Trim();
<# } #>

            // Mapping
<# foreach (CodeGenModelProperty property in model.Properties) { #>
            <#= model.Name.ToLower() #>.<#= property.Name #> = <#= model.Name.ToLower() #>Update.<#= property.Name #>;
<# } #>
<# foreach (CodeGenModelRelation relation in model.Relations.Where(r => r.Type == "many-to-one")) { #>
            <#= model.Name.ToLower() #>.<#= relation.Name #>Id = <#= model.Name.ToLower() #>Update.<#= relation.Name #>Id;
<# } #>

			// #-#-# {B5914243-E57E-41AE-A7C8-553F2F93267B}
			// Before update
			// #-#-#

			<#= model.Name.ToLower() #> = await this.<#= model.Name.ToLower() #>Repository.UpdateAsync(<#= model.Name.ToLower() #>);

			// #-#-# {983B1B6C-14A7-4925-8571-D77447DF0ADA}
			// After update
			// #-#-#

            return <#= model.Name.ToLower() #>;
        }

<# foreach (CodeGenModelRelation relation in model.Relations.Where(r => r.Type == "many-to-many" && !string.IsNullOrEmpty(r.Through))) { #>
        public async Task<<#= model.Name #>> Link<#= relation.Model #>To<#= model.Name #>Async(<#= relation.Through #> <#= relation.Through.ToCamelCase() #>)
        {
            <#= relation.Through #> <#= relation.Through.ToCamelCase() #>Link = this.<#= relation.Through.ToCamelCase() #>Repository.GetBy<#= model.Name #>And<#= relation.Model #>Id(<#= relation.Through.ToCamelCase() #>.<#= model.Name #>Id, <#= relation.Through.ToCamelCase() #>.<#= relation.Model #>Id);

            if (<#= relation.Through.ToCamelCase() #>Link == null)
            {
                await this.<#= relation.Through.ToCamelCase() #>Repository.InsertAsync(<#= relation.Through.ToCamelCase() #>);
            }
            else
            {
                // TODO: Mapping of fields on many-to-many
                //<#= relation.Through.ToCamelCase() #>Link.Field = <#= relation.Through.ToCamelCase() #>.Field;

                await this.<#= relation.Through.ToCamelCase() #>Repository.UpdateAsync(<#= relation.Through.ToCamelCase() #>Link);
            }

            return await this.Get<#= model.Name #>ByIdAsync(<#= relation.Through.ToCamelCase() #>.<#= model.Name #>Id);
        }

<# } #>
<# foreach (CodeGenModelRelation relation in model.Relations.Where(r => r.Type == "many-to-many" && !string.IsNullOrEmpty(r.Through))) { #>
        public async Task<<#= model.Name #>> Unlink<#= relation.Model #>From<#= model.Name #>Async(<#= relation.Through #> <#= relation.Through.ToCamelCase() #>)
        {
            <#= relation.Through #> <#= relation.Through.ToCamelCase() #>Link = this.<#= relation.Through.ToCamelCase() #>Repository.GetBy<#= model.Name #>And<#= relation.Model #>Id(<#= relation.Through.ToCamelCase() #>.<#= model.Name #>Id, <#= relation.Through.ToCamelCase() #>.<#= relation.Model #>Id);
		
            if (<#= relation.Through.ToCamelCase() #>Link != null)
            {
                await this.<#= relation.Through.ToCamelCase() #>Repository.DeleteAsync(<#= relation.Through.ToCamelCase() #>Link);
            }

            return await this.Get<#= model.Name #>ByIdAsync(<#= relation.Through.ToCamelCase() #>.<#= model.Name #>Id);
        }

<# } #>
		/// <summary>
		/// Deletes an existing <#= model.Name.ToLower() #> record by Id.
		/// </summary>
        public async Task<<#= model.Name #>> Delete<#= model.Name #>Async(<#= model.Name #> <#= model.Name.ToLower() #>)
        {
			// #-#-# {FE1A99E0-482D-455B-A8C1-3C2C11FACA58}
			// Before deletion
			// #-#-#

            await this.<#= model.Name.ToLower() #>Repository.DeleteAsync(<#= model.Name.ToLower() #>);

			// #-#-# {F09857C0-44E7-4E6C-B3E6-883C0D28E1A6}
			// After deletion
			// #-#-#

            return <#= model.Name.ToLower() #>;
        }
    }
}
