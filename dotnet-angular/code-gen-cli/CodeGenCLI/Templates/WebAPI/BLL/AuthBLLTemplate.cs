// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CodeGenCLI.Templates.WebAPI.BLL
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using CodeGenCLI.CodeGenClasses;
    using CodeGenCLI.Extensions;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\BLL\AuthBLLTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class AuthBLLTemplate : AuthBLLTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Microsoft.IdentityModel.Tokens;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;
using ");
            
            #line 17 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\BLL\AuthBLLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".DAL.Repositories;\r\nusing ");
            
            #line 18 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\BLL\AuthBLLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".Models;\r\nusing ");
            
            #line 19 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\BLL\AuthBLLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".ViewModels.Identity;\r\nusing ");
            
            #line 20 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\BLL\AuthBLLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".Services;\r\nusing Microsoft.AspNetCore.Identity;\r\nusing System.Globalization;\r\nus" +
                    "ing AutoMapper;\r\nusing Microsoft.AspNetCore.Http;\r\nusing ");
            
            #line 25 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\BLL\AuthBLLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".Framework.Exceptions;\r\n\r\nnamespace ");
            
            #line 27 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\BLL\AuthBLLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".BLL\r\n{\r\n\t/// <summary>\r\n\t/// The business logic layer for authentication.\r\n\t/// " +
                    "</summary>\r\n    public class AuthBLL\r\n    {\r\n        private readonly IConfigura" +
                    "tion configuration;\r\n        private readonly ILogger logger;\r\n        private r" +
                    "eadonly IMapper mapper;\r\n        private readonly IHttpContextAccessor httpConte" +
                    "xtAccessor;\r\n        private readonly UserManager<User> userManager;\r\n        pr" +
                    "ivate readonly SignInManager<User> signInManager;\r\n        private readonly IEma" +
                    "ilService emailService;\r\n\r\n        public AuthBLL(\r\n            IConfiguration c" +
                    "onfiguration,\r\n            ILogger<AuthBLL> logger,\r\n            IMapper mapper," +
                    "\r\n            IHttpContextAccessor httpContextAccessor,\r\n            UserManager" +
                    "<User> userManager,\r\n            SignInManager<User> signInManager,\r\n           " +
                    " IEmailService emailService\r\n        )\r\n        {\r\n            this.configuratio" +
                    "n = configuration;\r\n            this.logger = logger;\r\n            this.mapper =" +
                    " mapper;\r\n            this.httpContextAccessor = httpContextAccessor;\r\n         " +
                    "   this.userManager = userManager;\r\n            this.signInManager = signInManag" +
                    "er;\r\n            this.emailService = emailService;\r\n        }\r\n\r\n        public " +
                    "async Task<AuthenticatedVM> Login(LoginVM loginVM) {\r\n            // Validation\r" +
                    "\n            if (loginVM == null) {\r\n                return null;\r\n            }" +
                    "\r\n\r\n            // Result\r\n            AuthenticatedVM authenticatedVM = new Aut" +
                    "henticatedVM() {\r\n                RememberMe = loginVM.RememberMe\r\n            }" +
                    ";\r\n\r\n            // Retrieve user by email or username\r\n            User user = " +
                    "await userManager.FindByEmailAsync(loginVM.EmailOrUsername) ?? await userManager" +
                    ".FindByNameAsync(loginVM.EmailOrUsername);\r\n        \r\n            // If no user " +
                    "is found by email or username, just return unauthorized and give nothing away of" +
                    " existing user info\r\n            if (user == null)\r\n            {\r\n             " +
                    "   logger.LogWarning(\"User not found during login\", loginVM.EmailOrUsername);\r\n\r" +
                    "\n                throw new LoginFailedException(\"invalid\");\r\n            }\r\n\r\n  " +
                    "          // Log the user in by password\r\n            SignInResult signInResult " +
                    "= await signInManager.PasswordSignInAsync(user, loginVM.Password, loginVM.Rememb" +
                    "erMe, lockoutOnFailure: true);\r\n            \r\n            // Success\r\n          " +
                    "  if (signInResult.Succeeded)\r\n            {\r\n                // Authenticated b" +
                    "y password\r\n                logger.LogInformation(\"User logged in\", user);\r\n\r\n  " +
                    "              // Retrieve roles of user\r\n                user.Roles = (List<stri" +
                    "ng>)await userManager.GetRolesAsync(user);\r\n\r\n                // Set claims of u" +
                    "ser\r\n                List<Claim> claims = new List<Claim>() {\r\n                 " +
                    "   new Claim(JwtRegisteredClaimNames.NameId, user.Id.ToString().ToUpper()),\r\n   " +
                    "                 new Claim(JwtRegisteredClaimNames.UniqueName, user.UserName),\r\n" +
                    "                    new Claim(JwtRegisteredClaimNames.Email, user.Email),\r\n     " +
                    "               new Claim(JwtRegisteredClaimNames.Iat, DateTime.UtcNow.ToString(C" +
                    "ultureInfo.CurrentCulture))\r\n                };\r\n                if (!string.IsN" +
                    "ullOrEmpty(user.FirstName))\r\n                {\r\n                    claims.Add(n" +
                    "ew Claim(JwtRegisteredClaimNames.GivenName, user.FirstName));\r\n                }" +
                    "\r\n                if (!string.IsNullOrEmpty(user.LastName))\r\n                {\r\n" +
                    "                    claims.Add(new Claim(JwtRegisteredClaimNames.FamilyName, use" +
                    "r.LastName));\r\n                }\r\n\r\n                // Add roles as claims\r\n    " +
                    "            foreach (var role in user.Roles)\r\n                {\r\n               " +
                    "     claims.Add(new Claim(ClaimTypes.Role, role));\r\n                }\r\n\r\n       " +
                    "         // Authentication successful => Generate JWT token based on the user\'s " +
                    "claims\r\n                string token = this.GenerateJWT(claims);\r\n\r\n            " +
                    "    // Return user with token\r\n                authenticatedVM = new Authenticat" +
                    "edVM()\r\n                {\r\n                    User = mapper.Map<User, UserVM>(u" +
                    "ser),\r\n                    Token = token\r\n                };\r\n\r\n                " +
                    "return authenticatedVM;\r\n            }\r\n\r\n            // Failed\r\n            //i" +
                    "f (signInResult.RequiresTwoFactor)\r\n            //{\r\n            //    logger.Lo" +
                    "gInformation(\"User requires two factor auth\", user);\r\n            //\r\n          " +
                    "  //    return RedirectToAction(nameof(LoginWith2fa), new { returnUrl, loginVM.R" +
                    "ememberMe });\r\n            //}\r\n            if (signInResult.IsLockedOut)\r\n     " +
                    "       {\r\n                logger.LogWarning(\"User is locked out\", user);\r\n      " +
                    "          \r\n                throw new LoginFailedException(\"locked-out\");\r\n     " +
                    "       }\r\n            else if (signInResult.IsNotAllowed)\r\n            {\r\n      " +
                    "          logger.LogWarning(\"User is not allowed to login\", user);\r\n\r\n          " +
                    "      throw new LoginFailedException(\"not-allowed\");\r\n            }\r\n\r\n         " +
                    "   logger.LogWarning(\"User login is invalid\", user);\r\n\r\n            throw new Lo" +
                    "ginFailedException(\"invalid\");\r\n        }\r\n\r\n        public async Task<User> Me(" +
                    ")\r\n        {\r\n            User currentUser = await userManager.GetUserAsync(this" +
                    ".httpContextAccessor.HttpContext.User);\r\n\r\n            // Retrieve roles of user" +
                    "\r\n            currentUser.Roles = (List<string>)await userManager.GetRolesAsync(" +
                    "currentUser);\r\n\r\n            return currentUser;\r\n        }\r\n\r\n        public st" +
                    "ring GenerateJWT(List<Claim> claims)\r\n        {\r\n            JwtSecurityTokenHan" +
                    "dler tokenHandler = new JwtSecurityTokenHandler();\r\n            var key = Encodi" +
                    "ng.ASCII.GetBytes(configuration.GetSection(\"Authentication\").GetValue<string>(\"S" +
                    "ecret\"));\r\n            SecurityTokenDescriptor tokenDescriptor = new SecurityTok" +
                    "enDescriptor\r\n            {\r\n                Subject = new ClaimsIdentity(claims" +
                    "),\r\n                Expires = DateTime.UtcNow.AddMinutes(double.Parse(configurat" +
                    "ion.GetSection(\"Authentication\").GetValue<string>(\"TokenExpiresInMinutes\"))),\r\n " +
                    "               SigningCredentials = new SigningCredentials(new SymmetricSecurity" +
                    "Key(key), SecurityAlgorithms.HmacSha256Signature)\r\n            };\r\n\r\n           " +
                    " return tokenHandler.WriteToken(tokenHandler.CreateToken(tokenDescriptor));\r\n   " +
                    "     }\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class AuthBLLTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
