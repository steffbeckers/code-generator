// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CodeGenCLI.Templates.WebAPI.BLL
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using CodeGenCLI.CodeGenClasses;
    using CodeGenCLI.Extensions;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\BLL\AuthBLLTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class AuthBLLTemplate : AuthBLLTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Microsoft.IdentityModel.Tokens;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;
using ");
            
            #line 17 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\BLL\AuthBLLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".DAL.Repositories;\r\nusing ");
            
            #line 18 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\BLL\AuthBLLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".Models;\r\nusing ");
            
            #line 19 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\BLL\AuthBLLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".ViewModels.Identity;\r\nusing ");
            
            #line 20 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\BLL\AuthBLLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".Services;\r\nusing Microsoft.AspNetCore.Identity;\r\nusing System.Globalization;\r\nus" +
                    "ing AutoMapper;\r\nusing Microsoft.AspNetCore.Http;\r\nusing ");
            
            #line 25 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\BLL\AuthBLLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".Framework.Exceptions;\r\n\r\nnamespace ");
            
            #line 27 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\BLL\AuthBLLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".BLL\r\n{\r\n\t/// <summary>\r\n\t/// The business logic layer for authentication.\r\n\t/// " +
                    "</summary>\r\n    public class AuthBLL\r\n    {\r\n        private readonly IConfigura" +
                    "tion configuration;\r\n        private readonly ILogger logger;\r\n        private r" +
                    "eadonly IMapper mapper;\r\n        private readonly IHttpContextAccessor httpConte" +
                    "xtAccessor;\r\n        private readonly UserManager<User> userManager;\r\n        pr" +
                    "ivate readonly SignInManager<User> signInManager;\r\n        private readonly IEma" +
                    "ilService emailService;\r\n\r\n        public AuthBLL(\r\n            IConfiguration c" +
                    "onfiguration,\r\n            ILogger<AuthBLL> logger,\r\n            IMapper mapper," +
                    "\r\n            IHttpContextAccessor httpContextAccessor,\r\n            UserManager" +
                    "<User> userManager,\r\n            SignInManager<User> signInManager,\r\n           " +
                    " IEmailService emailService\r\n        )\r\n        {\r\n            this.configuratio" +
                    "n = configuration;\r\n            this.logger = logger;\r\n            this.mapper =" +
                    " mapper;\r\n            this.httpContextAccessor = httpContextAccessor;\r\n         " +
                    "   this.userManager = userManager;\r\n            this.signInManager = signInManag" +
                    "er;\r\n            this.emailService = emailService;\r\n        }\r\n\r\n        public " +
                    "async Task<AuthenticatedVM> Login(LoginVM loginVM) {\r\n            // Validation\r" +
                    "\n            if (loginVM == null) {\r\n                return null;\r\n            }" +
                    "\r\n\r\n            // Result\r\n            AuthenticatedVM authenticatedVM = new Aut" +
                    "henticatedVM() {\r\n                RememberMe = loginVM.RememberMe\r\n            }" +
                    ";\r\n\r\n            // Retrieve user by email or username\r\n            User user = " +
                    "await userManager.FindByEmailAsync(loginVM.EmailOrUsername) ?? await userManager" +
                    ".FindByNameAsync(loginVM.EmailOrUsername);\r\n            if (user == null)\r\n     " +
                    "       {\r\n                logger.LogWarning(\"User not found during login\", login" +
                    "VM.EmailOrUsername);\r\n\r\n                throw new LoginFailedException(\"invalid\"" +
                    ");\r\n            }\r\n\r\n            // Log the user in by password\r\n            Sig" +
                    "nInResult signInResult = await signInManager.PasswordSignInAsync(user, loginVM.P" +
                    "assword, loginVM.RememberMe, lockoutOnFailure: true);\r\n            \r\n           " +
                    " // Success\r\n            if (signInResult.Succeeded)\r\n            {\r\n           " +
                    "     // Authenticated by password\r\n                logger.LogInformation(\"User l" +
                    "ogged in\", user);\r\n\r\n                // Retrieve roles of user\r\n                " +
                    "user.Roles = (List<string>)await userManager.GetRolesAsync(user);\r\n\r\n           " +
                    "     // Set claims of user\r\n                List<Claim> claims = new List<Claim>" +
                    "() {\r\n                    new Claim(JwtRegisteredClaimNames.NameId, user.Id.ToSt" +
                    "ring().ToUpper()),\r\n                    new Claim(JwtRegisteredClaimNames.Unique" +
                    "Name, user.UserName),\r\n                    new Claim(JwtRegisteredClaimNames.Ema" +
                    "il, user.Email),\r\n                    new Claim(JwtRegisteredClaimNames.Iat, Dat" +
                    "eTime.UtcNow.ToString(CultureInfo.CurrentCulture))\r\n                };\r\n\r\n      " +
                    "          // TODO: Custom fields\r\n                if (!string.IsNullOrEmpty(user" +
                    ".FirstName))\r\n                {\r\n                    claims.Add(new Claim(JwtReg" +
                    "isteredClaimNames.GivenName, user.FirstName));\r\n                }\r\n             " +
                    "   if (!string.IsNullOrEmpty(user.LastName))\r\n                {\r\n               " +
                    "     claims.Add(new Claim(JwtRegisteredClaimNames.FamilyName, user.LastName));\r\n" +
                    "                }\r\n\r\n                // Add roles as claims\r\n                for" +
                    "each (var role in user.Roles)\r\n                {\r\n                    claims.Add" +
                    "(new Claim(ClaimTypes.Role, role));\r\n                }\r\n\r\n                // Aut" +
                    "hentication successful => Generate JWT token based on the user\'s claims\r\n       " +
                    "         string token = this.GenerateJWT(claims);\r\n\r\n                // Return u" +
                    "ser with token\r\n                authenticatedVM = new AuthenticatedVM()\r\n       " +
                    "         {\r\n                    User = mapper.Map<User, UserVM>(user),\r\n        " +
                    "            Token = token\r\n                };\r\n\r\n                return authenti" +
                    "catedVM;\r\n            }\r\n\r\n            // Failed\r\n            //if (signInResult" +
                    ".RequiresTwoFactor)\r\n            //{\r\n            //    logger.LogInformation(\"U" +
                    "ser requires two factor auth\", user);\r\n            //\r\n            //    return " +
                    "RedirectToAction(nameof(LoginWith2fa), new { returnUrl, loginVM.RememberMe });\r\n" +
                    "            //}\r\n            if (signInResult.IsLockedOut)\r\n            {\r\n     " +
                    "           logger.LogWarning(\"User is locked out\", user);\r\n                \r\n   " +
                    "             throw new LoginFailedException(\"locked-out\");\r\n            }\r\n     " +
                    "       else if (signInResult.IsNotAllowed)\r\n            {\r\n                logge" +
                    "r.LogWarning(\"User is not allowed to login\", user);\r\n\r\n                throw new" +
                    " LoginFailedException(\"not-allowed\");\r\n            }\r\n\r\n            logger.LogWa" +
                    "rning(\"User login is invalid\", user);\r\n\r\n            throw new LoginFailedExcept" +
                    "ion(\"invalid\");\r\n        }\r\n\r\n        public async Task Logout()\r\n        {\r\n   " +
                    "         await signInManager.SignOutAsync();\r\n        }\r\n\r\n        public async " +
                    "Task<User> Me()\r\n        {\r\n            User currentUser = await userManager.Get" +
                    "UserAsync(this.httpContextAccessor.HttpContext.User);\r\n\r\n            // Retrieve" +
                    " roles of user\r\n            currentUser.Roles = (List<string>)await userManager." +
                    "GetRolesAsync(currentUser);\r\n\r\n            return currentUser;\r\n        }\r\n\r\n   " +
                    "     public async Task<RegisteredVM> Register(RegisterVM registerVM) {\r\n        " +
                    "    // Validation\r\n            if (registerVM == null) {\r\n                return" +
                    " null;\r\n            }\r\n\r\n            // Result\r\n            RegisteredVM registe" +
                    "redVM = new RegisteredVM();\r\n\r\n            User user = new User {\r\n             " +
                    "   UserName = registerVM.Username,\r\n                Email = registerVM.Email,\r\n " +
                    "               FirstName = registerVM.FirstName,\r\n                LastName = reg" +
                    "isterVM.LastName\r\n            };\r\n\r\n            IdentityResult result = await us" +
                    "erManager.CreateAsync(user, registerVM.Password);\r\n\r\n            if (result.Succ" +
                    "eeded)\r\n            {\r\n                logger.LogInformation(\"User created a new" +
                    " account with password.\");\r\n\r\n                // Email confirmation\r\n           " +
                    "     if (configuration.GetSection(\"Authentication\").GetValue<bool>(\"EmailConfirm" +
                    "ation\")) {\r\n                    string code = await userManager.GenerateEmailCon" +
                    "firmationTokenAsync(user);\r\n\r\n                    string callbackUrl = configura" +
                    "tion.GetSection(\"Authentication\").GetValue<string>(\"ConfirmEmailURL\");\r\n        " +
                    "            callbackUrl = callbackUrl.Replace(\"{{userId}}\", user.Id.ToString().T" +
                    "oUpper());\r\n                    callbackUrl = callbackUrl.Replace(\"{{userEmail}}" +
                    "\", user.Email.ToString().ToLower());\r\n                    callbackUrl = callback" +
                    "Url.Replace(\"{{code}}\", Uri.EscapeDataString(code));\r\n\r\n                    awai" +
                    "t emailService.SendEmailConfirmationAsync(registerVM.Email, callbackUrl);\r\n     " +
                    "           }\r\n                else {\r\n                    // Set claims of user\r" +
                    "\n                    List<Claim> claims = new List<Claim>() {\r\n                 " +
                    "       new Claim(JwtRegisteredClaimNames.NameId, user.Id.ToString().ToUpper()),\r" +
                    "\n                        new Claim(JwtRegisteredClaimNames.UniqueName, user.User" +
                    "Name),\r\n                        new Claim(JwtRegisteredClaimNames.Email, user.Em" +
                    "ail),\r\n                        new Claim(JwtRegisteredClaimNames.Iat, DateTime.U" +
                    "tcNow.ToString(CultureInfo.CurrentCulture))\r\n                    };\r\n\r\n         " +
                    "           // TODO: Custom fields\r\n                    if (!string.IsNullOrEmpty" +
                    "(user.FirstName))\r\n                    {\r\n                        claims.Add(new" +
                    " Claim(JwtRegisteredClaimNames.GivenName, user.FirstName));\r\n                   " +
                    " }\r\n                    if (!string.IsNullOrEmpty(user.LastName))\r\n             " +
                    "       {\r\n                        claims.Add(new Claim(JwtRegisteredClaimNames.F" +
                    "amilyName, user.LastName));\r\n                    }\r\n\r\n                    // Reg" +
                    "istration successful, no email confirmation required => Generate JWT token based" +
                    " on the user\'s claims\r\n                    string token = this.GenerateJWT(claim" +
                    "s);\r\n\r\n                    registeredVM.Token = token;\r\n                }\r\n\r\n   " +
                    "             registeredVM.User = mapper.Map<User, UserVM>(user);\r\n\r\n            " +
                    "    return registeredVM;\r\n            }\r\n\r\n            logger.LogWarning(\"User r" +
                    "egistration is invalid\", user);\r\n\r\n            throw new RegistrationFailedExcep" +
                    "tion(\"invalid\");\r\n        }\r\n\r\n        public async Task<EmailConfirmedVM> Confi" +
                    "rmEmail(string userId, string code)\r\n        {\r\n            // Validation\r\n     " +
                    "       if (string.IsNullOrEmpty(userId) || string.IsNullOrEmpty(code))\r\n        " +
                    "    {\r\n                return null;\r\n            }\r\n\r\n            // Result\r\n   " +
                    "         EmailConfirmedVM emailConfirmedVM = new EmailConfirmedVM();\r\n\r\n        " +
                    "    User user = await userManager.FindByIdAsync(userId);\r\n            if (user =" +
                    "= null)\r\n            {\r\n                logger.LogWarning(\"User not found during" +
                    " email confirmation\", userId);\r\n\r\n                throw new ConfirmEmailFailedEx" +
                    "ception(\"invalid\");\r\n            }\r\n\r\n            IdentityResult result = await " +
                    "userManager.ConfirmEmailAsync(user, code);\r\n            if (result.Succeeded)\r\n " +
                    "           {\r\n                // Set claims of user\r\n                List<Claim>" +
                    " claims = new List<Claim>() {\r\n                    new Claim(JwtRegisteredClaimN" +
                    "ames.NameId, user.Id.ToString().ToUpper()),\r\n                    new Claim(JwtRe" +
                    "gisteredClaimNames.UniqueName, user.UserName),\r\n                    new Claim(Jw" +
                    "tRegisteredClaimNames.Email, user.Email),\r\n                    new Claim(JwtRegi" +
                    "steredClaimNames.Iat, DateTime.UtcNow.ToString(CultureInfo.CurrentCulture))\r\n   " +
                    "             };\r\n\r\n                // TODO: Custom fields\r\n                if (!" +
                    "string.IsNullOrEmpty(user.FirstName))\r\n                {\r\n                    cl" +
                    "aims.Add(new Claim(JwtRegisteredClaimNames.GivenName, user.FirstName));\r\n       " +
                    "         }\r\n                if (!string.IsNullOrEmpty(user.LastName))\r\n         " +
                    "       {\r\n                    claims.Add(new Claim(JwtRegisteredClaimNames.Famil" +
                    "yName, user.LastName));\r\n                }\r\n\r\n                // Email confirmat" +
                    "ion successful => Generate JWT token based on the user\'s claims\r\n               " +
                    " string token = this.GenerateJWT(claims);\r\n\r\n                emailConfirmedVM.To" +
                    "ken = token;\r\n                emailConfirmedVM.User = mapper.Map<User, UserVM>(u" +
                    "ser);\r\n\r\n                return emailConfirmedVM;\r\n            }\r\n\r\n            " +
                    "logger.LogWarning(\"Email confirmation is invalid\", user);\r\n\r\n            throw n" +
                    "ew ConfirmEmailFailedException(\"invalid\");\r\n        }\r\n\r\n        public async Ta" +
                    "sk ForgotPassword(ForgotPasswordVM forgotPasswordVM)\r\n        {\r\n            // " +
                    "Validation\r\n            if (forgotPasswordVM == null) {\r\n                throw n" +
                    "ew ForgotPasswordFailedException(\"invalid\");\r\n            }\r\n\r\n            // Re" +
                    "trieve user by email\r\n            User user = await userManager.FindByEmailAsync" +
                    "(forgotPasswordVM.Email);\r\n            if (user == null)\r\n            {\r\n       " +
                    "         logger.LogWarning(\"User not found during forgot password\", forgotPasswo" +
                    "rdVM.Email);\r\n\r\n                throw new ForgotPasswordFailedException(\"invalid" +
                    "\");\r\n            }\r\n\r\n            // For more information on how to enable accou" +
                    "nt confirmation and password reset please\r\n            // visit https://go.micro" +
                    "soft.com/fwlink/?LinkID=532713\r\n\r\n            string code = await userManager.Ge" +
                    "neratePasswordResetTokenAsync(user);\r\n\r\n            logger.LogInformation(\"Passw" +
                    "ord reset code:\");\r\n            logger.LogInformation(code);\r\n\r\n            var " +
                    "callbackUrl = configuration.GetSection(\"Authentication\").GetValue<string>(\"Reset" +
                    "PasswordURL\");\r\n            callbackUrl = callbackUrl.Replace(\"{{userId}}\", user" +
                    ".Id.ToString().ToUpper());\r\n            callbackUrl = callbackUrl.Replace(\"{{use" +
                    "rEmail}}\", user.Email.ToString().ToLower());\r\n            callbackUrl = callback" +
                    "Url.Replace(\"{{code}}\", Uri.EscapeDataString(code));\r\n\r\n            await emailS" +
                    "ervice.SendPasswordResetAsync(forgotPasswordVM.Email, callbackUrl);\r\n        }\r\n" +
                    "\r\n        public async Task<PasswordResettedVM> ResetPassword(ResetPasswordVM re" +
                    "setPasswordVM) {\r\n            // Validation\r\n            if (resetPasswordVM == " +
                    "null) {\r\n                throw new ResetPasswordFailedException(\"invalid\");\r\n   " +
                    "         }\r\n\r\n            // Result\r\n            PasswordResettedVM passwordRese" +
                    "ttedVM = new PasswordResettedVM();\r\n\r\n            // Retrieve user by email\r\n   " +
                    "         User user = await userManager.FindByIdAsync(resetPasswordVM.Id);\r\n     " +
                    "       if (user == null)\r\n            {\r\n                logger.LogWarning(\"User" +
                    " not found during reset password\", resetPasswordVM.Id);\r\n\r\n                throw" +
                    " new ResetPasswordFailedException(\"invalid\");\r\n            }\r\n            \r\n    " +
                    "        // Validate email address\r\n            if (user.Email != resetPasswordVM" +
                    ".Email)\r\n            {\r\n                throw new ResetPasswordFailedException(\"" +
                    "invalid-email\");\r\n            }\r\n\r\n            IdentityResult result = await use" +
                    "rManager.ResetPasswordAsync(user, resetPasswordVM.Code, resetPasswordVM.Password" +
                    ");\r\n            if (result.Succeeded)\r\n            {\r\n                // Set cla" +
                    "ims of user\r\n                List<Claim> claims = new List<Claim>() {\r\n         " +
                    "           new Claim(JwtRegisteredClaimNames.NameId, user.Id.ToString().ToUpper(" +
                    ")),\r\n                    new Claim(JwtRegisteredClaimNames.UniqueName, user.User" +
                    "Name),\r\n                    new Claim(JwtRegisteredClaimNames.Email, user.Email)" +
                    ",\r\n                    new Claim(JwtRegisteredClaimNames.Iat, DateTime.UtcNow.To" +
                    "String(CultureInfo.CurrentCulture))\r\n                };\r\n\r\n                // TO" +
                    "DO: Custom fields\r\n                if (!string.IsNullOrEmpty(user.FirstName))\r\n " +
                    "               {\r\n                    claims.Add(new Claim(JwtRegisteredClaimNam" +
                    "es.GivenName, user.FirstName));\r\n                }\r\n                if (!string." +
                    "IsNullOrEmpty(user.LastName))\r\n                {\r\n                    claims.Add" +
                    "(new Claim(JwtRegisteredClaimNames.FamilyName, user.LastName));\r\n               " +
                    " }\r\n\r\n                // Registration successful, no email confirmation required" +
                    " => Generate JWT token based on the user\'s claims\r\n                string token " +
                    "= this.GenerateJWT(claims);\r\n\r\n                passwordResettedVM.Token = token;" +
                    "\r\n                passwordResettedVM.User = mapper.Map<User, UserVM>(user);\r\n\r\n " +
                    "               return passwordResettedVM;\r\n            }\r\n            \r\n        " +
                    "    logger.LogWarning(\"Reset password is invalid\", user);\r\n\r\n            throw n" +
                    "ew ResetPasswordFailedException(\"invalid\");\r\n        }\r\n\r\n        public string " +
                    "GenerateJWT(List<Claim> claims)\r\n        {\r\n            JwtSecurityTokenHandler " +
                    "tokenHandler = new JwtSecurityTokenHandler();\r\n            var key = Encoding.AS" +
                    "CII.GetBytes(configuration.GetSection(\"Authentication\").GetValue<string>(\"Secret" +
                    "\"));\r\n            SecurityTokenDescriptor tokenDescriptor = new SecurityTokenDes" +
                    "criptor\r\n            {\r\n                Subject = new ClaimsIdentity(claims),\r\n " +
                    "               Expires = DateTime.UtcNow.AddMinutes(double.Parse(configuration.G" +
                    "etSection(\"Authentication\").GetValue<string>(\"TokenExpiresInMinutes\"))),\r\n      " +
                    "          SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(k" +
                    "ey), SecurityAlgorithms.HmacSha256Signature)\r\n            };\r\n\r\n            retu" +
                    "rn tokenHandler.WriteToken(tokenHandler.CreateToken(tokenDescriptor));\r\n        " +
                    "}\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class AuthBLLTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
