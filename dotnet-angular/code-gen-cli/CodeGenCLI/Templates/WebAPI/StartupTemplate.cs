// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CodeGenCLI.Templates.WebAPI
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using CodeGenCLI.CodeGenClasses;
    using CodeGenCLI.Extensions;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class StartupTemplate : StartupTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"using Amazon.S3;
using AutoMapper;
using Elastic.Apm.NetCoreAll;
using GraphQL;
using GraphQL.Server;
using GraphQL.Server.Authorization.AspNetCore;
using GraphQL.Server.Ui.Altair;
using GraphQL.Server.Ui.GraphiQL;
using GraphQL.Server.Ui.Playground;
using GraphQL.Server.Ui.Voyager;
using GraphQL.Validation;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Http.Features;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Server.Kestrel.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.ObjectPool;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using Newtonsoft.Json;
using RabbitMQ.Client;
using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using ");
            
            #line 42 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".BLL;\r\nusing ");
            
            #line 43 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".DAL;\r\nusing ");
            
            #line 44 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".DAL.Repositories;\r\nusing ");
            
            #line 45 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".Framework.Exceptions;\r\nusing ");
            
            #line 46 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".GraphQL;\r\nusing ");
            
            #line 47 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".Mappers;\r\nusing ");
            
            #line 48 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".Models;\r\nusing ");
            
            #line 49 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".Services.Emails;\r\nusing ");
            
            #line 50 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".Services.Files;\r\nusing ");
            
            #line 51 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".Services.RabbitMQ;\r\n\r\nnamespace ");
            
            #line 53 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(@"
{
    public class Startup
    {
        public IConfiguration configuration { get; }

        public Startup(IConfiguration configuration)
        {
            this.configuration = configuration;
        }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
		    // CORS
            services.AddCors();

            // Connection to the ");
            
            #line 70 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(config.Name));
            
            #line default
            #line hidden
            this.Write(" database\r\n            services.AddDbContext<");
            
            #line 71 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(config.Name));
            
            #line default
            #line hidden
            this.Write("Context>(options =>\r\n                options.UseSqlServer(this.configuration.GetC" +
                    "onnectionString(\"");
            
            #line 72 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(config.Name));
            
            #line default
            #line hidden
            this.Write("Context\")));\r\n\r\n            // Repositories\r\n");
            
            #line 75 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 foreach (CodeGenModel model in config.Models) { 
            
            #line default
            #line hidden
            this.Write("\t\t\tservices.AddScoped<");
            
            #line 76 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Name));
            
            #line default
            #line hidden
            this.Write("Repository>();\r\n");
            
            #line 77 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t// BLLs\r\n");
            
            #line 80 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 foreach (CodeGenModel model in config.Models.Where(m => !m.ManyToMany)) { 
            
            #line default
            #line hidden
            this.Write("\t\t\tservices.AddScoped<");
            
            #line 81 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Name));
            
            #line default
            #line hidden
            this.Write("BLL>();\r\n");
            
            #line 82 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 83 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 if (config.Authentication.Enabled) { 
            
            #line default
            #line hidden
            this.Write("            services.AddScoped<AuthBLL>();\r\n");
            
            #line 85 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n            // Services\r\n");
            
            #line 88 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 if (config.WebAPI.EmailService.Enabled) { 
            
            #line default
            #line hidden
            this.Write("            services.AddSingleton<IEmailService, EmailService>();\r\n");
            
            #line 90 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"
            // AWS
            services.AddDefaultAWSOptions(this.configuration.GetAWSOptions());
            services.AddAWSService<IAmazonS3>();
            services.AddSingleton<AWSS3Service>();

            // Uploads
            services.AddSingleton<FileService>();
            services.Configure<FormOptions>(options =>
            {
                // Set the upload limit
                options.MultipartBodyLengthLimit = this.configuration.GetSection(""FileService"").GetValue<int>(""MaxFileSizeInBytes"");
            });

            // RabbitMQ
            services.AddSingleton<ObjectPoolProvider, DefaultObjectPoolProvider>();
            services.AddSingleton<IPooledObjectPolicy<IModel>, RabbitMQPooledObjectPolicy>();
            services.AddSingleton<RabbitMQService>();
");
            
            #line 109 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 if (config.Authentication.Enabled) { 
            
            #line default
            #line hidden
            this.Write("\r\n            // Authentication\r\n            services.AddIdentity<User, IdentityR" +
                    "ole<Guid>>()\r\n                .AddRoleManager<RoleManager<IdentityRole<Guid>>>()" +
                    "\r\n                .AddEntityFrameworkStores<");
            
            #line 114 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(config.Name));
            
            #line default
            #line hidden
            this.Write("Context>()\r\n                .AddDefaultTokenProviders();\r\n\r\n            //// Opti" +
                    "ons\r\n            services.Configure<IdentityOptions>(options =>\r\n            {\r\n" +
                    "                // Sign in\r\n                options.SignIn.RequireConfirmedEmail" +
                    " = this.configuration.GetSection(\"Authentication\").GetValue<bool>(\"EmailConfirma" +
                    "tion\");\r\n\r\n                // Password settings\r\n                options.Passwor" +
                    "d.RequireDigit = true;\r\n                options.Password.RequiredLength = 10;\r\n " +
                    "               options.Password.RequireNonAlphanumeric = false;\r\n               " +
                    " options.Password.RequireUppercase = true;\r\n                options.Password.Req" +
                    "uireLowercase = true;\r\n                options.Password.RequiredUniqueChars = 6;" +
                    "\r\n\r\n                // Lockout settings\r\n                options.Lockout.Default" +
                    "LockoutTimeSpan = TimeSpan.FromMinutes(30);\r\n                options.Lockout.Max" +
                    "FailedAccessAttempts = 10;\r\n                options.Lockout.AllowedForNewUsers =" +
                    " true;\r\n\r\n                // User settings\r\n                options.User.Require" +
                    "UniqueEmail = true;\r\n            });\r\n\r\n            //// JWT\'s\r\n            serv" +
                    "ices.AddAuthentication(options =>\r\n            {\r\n                options.Defaul" +
                    "tAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\r\n                o" +
                    "ptions.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\r\n       " +
                    "     })\r\n            .AddJwtBearer(options =>\r\n            {\r\n                op" +
                    "tions.RequireHttpsMetadata = false;\r\n                options.SaveToken = true;\r\n" +
                    "                options.TokenValidationParameters = new TokenValidationParameter" +
                    "s\r\n                {\r\n                    ValidateIssuerSigningKey = true,\r\n    " +
                    "                IssuerSigningKey = new SymmetricSecurityKey(Encoding.ASCII.GetBy" +
                    "tes(configuration.GetSection(\"Authentication\").GetValue<string>(\"Secret\"))),\r\n  " +
                    "                  ValidateIssuer = false,\r\n                    ValidateAudience " +
                    "= false,\r\n                    ClockSkew = TimeSpan.Zero,\r\n                    Va" +
                    "lidateLifetime = true\r\n                };\r\n                options.Events = new " +
                    "JwtBearerEvents\r\n                {\r\n                    OnMessageReceived = cont" +
                    "ext =>\r\n                    {\r\n                        // Allow the access token" +
                    " to be set by query param\r\n                        if (context.Request.Method.Eq" +
                    "uals(\"GET\") && context.Request.Query.ContainsKey(\"access_token\"))\r\n             " +
                    "               context.Token = context.Request.Query[\"access_token\"];\r\n\r\n       " +
                    "                 return Task.CompletedTask;\r\n                    }\r\n            " +
                    "    };\r\n            });\r\n");
            
            #line 171 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n            // HttpContext\r\n            services.AddHttpContextAccessor();\r\n\r\n");
            
            #line 176 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 if (config.Authentication.Enabled) { 
            
            #line default
            #line hidden
            this.Write(@"            // Authorization
            services.AddTransient<IValidationRule, AuthorizationValidationRule>();
            services.AddAuthorization(options =>
            {
                options.AddPolicy(""Authorized"", p => p.RequireAuthenticatedUser());
                //options.AddPolicy(""SteffOnly"", p => p.RequireClaim(ClaimTypes.Name, ""steff""));
            });

");
            
            #line 185 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("            // GraphQL\r\n            services.AddScoped<IDependencyResolver>(s =>\r" +
                    "\n                new FuncDependencyResolver(s.GetRequiredService));\r\n           " +
                    " services.AddScoped<");
            
            #line 189 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(config.Name));
            
            #line default
            #line hidden
            this.Write(@"Schema>();
            services.AddGraphQL(options =>
            {
                options.EnableMetrics = true;
                options.ExposeExceptions = true; // TODO: Only in DEV?
            })
            .AddGraphTypes(ServiceLifetime.Scoped)
");
            
            #line 196 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 if (config.Authentication.Enabled) { 
            
            #line default
            #line hidden
            this.Write(@"            //.AddGraphQLAuthorization(options =>
            //{
            //    options.AddPolicy(""Authorized"", p => p.RequireAuthenticatedUser());
            //    //options.AddPolicy(""SteffOnly"", p => p.RequireClaim(ClaimTypes.Name, ""steff""));
            //})
            .AddUserContextBuilder(httpContext => httpContext.User)
");
            
            #line 203 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"            .AddWebSockets();

			// AutoMapper
            var mappingConfig = new MapperConfiguration(mc =>
            {
                mc.AddProfile(new AutoMapperProfile());
            });
            IMapper mapper = mappingConfig.CreateMapper();
            services.AddSingleton(mapper);

			// MVC
            services.AddControllers()
                .AddNewtonsoftJson(options =>
                {
                    options.SerializerSettings.MaxDepth = 10;
                    options.SerializerSettings.NullValueHandling = NullValueHandling.Ignore;
                    options.SerializerSettings.ReferenceLoopHandling = ReferenceLoopHandling.Ignore;
                }
            );

			// Swagger
			// Register the Swagger generator, defining 1 or more Swagger documents
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc(""v1"", new OpenApiInfo
                {
                    Title = """);
            
            #line 230 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(config.DisplayName));
            
            #line default
            #line hidden
            this.Write(" Web API\",\r\n                    Version = \"v1\"\r\n                });\r\n");
            
            #line 233 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 if (config.Authentication.Enabled) { 
            
            #line default
            #line hidden
            this.Write(@"                c.AddSecurityDefinition(""Bearer"", new OpenApiSecurityScheme
                {
                    Description =
                        ""JWT Authorization header using the Bearer scheme. \r\n\r\n Enter 'Bearer' [space] and then your token in the text input below.\r\n\r\nExample: \""Bearer 12345abcdef\"""",
                    Name = ""Authorization"",
                    In = ParameterLocation.Header,
                    Type = SecuritySchemeType.ApiKey,
                    Scheme = ""Bearer""
                });
                c.AddSecurityRequirement(new OpenApiSecurityRequirement()
                {
                    {
                        new OpenApiSecurityScheme
                        {
                            Reference = new OpenApiReference
                            {
                                Type = ReferenceType.SecurityScheme,
                                Id = ""Bearer""
                            },
                            Scheme = ""oauth2"",
                            Name = ""Bearer"",
                            In = ParameterLocation.Header,

                        },
                        new List<string>()
                    }
                });
");
            
            #line 261 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n                // Set the comments path for the Swagger JSON and UI.\r\n        " +
                    "        var xmlFile = $\"{Assembly.GetExecutingAssembly().GetName().Name}.xml\";\r\n" +
                    "                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);\r\n" +
                    "                c.IncludeXmlComments(xmlPath);\r\n            });\r\n\r\n            /" +
                    "/ Kestrel\r\n            services.Configure<KestrelServerOptions>(options =>\r\n    " +
                    "        {\r\n                // Uploads\r\n                // Handle requests up to " +
                    "50 MB\r\n                options.Limits.MaxRequestBodySize = 52428800;\r\n          " +
                    "      options.AllowSynchronousIO = true;\r\n            });\r\n\r\n            // IIS " +
                    "Express\r\n            services.Configure<IISServerOptions>(options =>\r\n          " +
                    "  {\r\n                // Uploads\r\n                // Handle requests up to 50 MB\r" +
                    "\n                options.MaxRequestBodySize = 52428800;\r\n                options" +
                    ".AllowSynchronousIO = true;\r\n            });\r\n        }\r\n\r\n        // This metho" +
                    "d gets called by the runtime. Use this method to configure the HTTP request pipe" +
                    "line.\r\n        public void Configure(IApplicationBuilder app, IWebHostEnvironmen" +
                    "t env, IServiceProvider serviceProvider)\r\n        {\r\n\t\t    // CORS\r\n            " +
                    "app.UseCors(options =>\r\n\t\t\t{\r\n                options.AllowAnyOrigin()\r\n        " +
                    "            .AllowAnyMethod()\r\n                    .AllowAnyHeader();\r\n         " +
                    "   });\r\n\r\n            //// Error handling\r\n            //if (env.IsDevelopment()" +
                    ")\r\n            //{\r\n            //    app.UseDeveloperExceptionPage();\r\n        " +
                    "    //}\r\n            //else\r\n            //{\r\n            //    app.UseException" +
                    "Handler(appBuilder =>\r\n            //    {\r\n            //        appBuilder.Run" +
                    "(async context =>\r\n            //        {\r\n            //            context.Re" +
                    "sponse.StatusCode = 500;\r\n            //            await context.Response.Write" +
                    "Async(\"An unexpected fault happened. Try again later.\");\r\n            //        " +
                    "});\r\n            //    });\r\n            //}\r\n\r\n            // Error handling\r\n  " +
                    "          app.UseMiddleware(typeof(ErrorHandlingMiddleware));\r\n\r\n            // " +
                    "Elastic APM\r\n            if (env.IsProduction())\r\n            {\r\n               " +
                    " app.UseAllElasticApm(this.configuration);\r\n            }\r\n\r\n            // Stat" +
                    "ic files, most likely for resumes templates now\r\n            app.UseStaticFiles(" +
                    ");\r\n\r\n            // Update database migrations on startup\r\n            UpdateDa" +
                    "tabase(app);\r\n\r\n            // Authentication\r\n            app.UseAuthentication" +
                    "();\r\n\r\n            app.UseRouting();\r\n\r\n\t\t\t// Authorization\r\n            app.Use" +
                    "Authorization();\r\n\r\n            // Web sockets\r\n            app.UseWebSockets();" +
                    "\r\n\r\n            // GraphQL\r\n            app.UseGraphQLWebSockets<");
            
            #line 343 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(config.Name));
            
            #line default
            #line hidden
            this.Write("Schema>(\"/graphql\");\r\n            app.UseGraphQL<");
            
            #line 344 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(config.Name));
            
            #line default
            #line hidden
            this.Write(@"Schema>(""/graphql"");
            app.UseGraphiQLServer(new GraphiQLOptions
            {
                GraphiQLPath = ""/ui/graphiql"",
                GraphQLEndPoint = ""/graphql""
            });
            app.UseGraphQLAltair(new GraphQLAltairOptions());
            app.UseGraphQLPlayground(new GraphQLPlaygroundOptions());
            app.UseGraphQLVoyager(new GraphQLVoyagerOptions());

            // Swagger
            // Enable middleware to serve generated Swagger as a JSON endpoint.
            app.UseSwagger(c =>
            {
                c.RouteTemplate = ""ui/swagger/{documentName}/swagger.json"";
            })
            // Enable middleware to serve swagger-ui (HTML, JS, CSS, etc.), 
            // specifying the Swagger JSON endpoint.
            .UseSwaggerUI(c =>
            {
                c.SwaggerEndpoint(""/ui/swagger/v1/swagger.json"", ""Resume Job Matcher Web API V1"");
                c.RoutePrefix = ""ui/swagger"";
            });

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });

");
            
            #line 373 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 if (config.Authentication.Enabled) { 
            
            #line default
            #line hidden
            this.Write("            // Authentication / Authorization\r\n            CreateRolesAndAdminUse" +
                    "r(serviceProvider);\r\n");
            
            #line 376 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        }\r\n\r\n        private void UpdateDatabase(IApplicationBuilder app)\r\n      " +
                    "  {\r\n            using (IServiceScope serviceScope = app.ApplicationServices.Get" +
                    "RequiredService<IServiceScopeFactory>().CreateScope())\r\n            {\r\n         " +
                    "       using (");
            
            #line 383 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(config.Name));
            
            #line default
            #line hidden
            this.Write("Context context = serviceScope.ServiceProvider.GetService<");
            
            #line 383 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(config.Name));
            
            #line default
            #line hidden
            this.Write("Context>())\r\n                {\r\n                    context.Database.Migrate();\r\n" +
                    "                }\r\n            }\r\n        }\r\n\r\n");
            
            #line 390 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 if (config.Authentication.Enabled) { 
            
            #line default
            #line hidden
            this.Write(@"        private void CreateRolesAndAdminUser(IServiceProvider serviceProvider)
        {
            RoleManager<IdentityRole<Guid>> roleManager = serviceProvider.GetRequiredService<RoleManager<IdentityRole<Guid>>>();
            UserManager<User> userManager = serviceProvider.GetRequiredService<UserManager<User>>();

            // Roles
            Task<IdentityRole<Guid>> adminRole = roleManager.FindByNameAsync(""Admin"");
            adminRole.Wait();
            if (adminRole.Result == null)
            {
                IdentityRole<Guid> newAdminRole = new IdentityRole<Guid>()
                {
                    Name = ""Admin"",
                    NormalizedName = ""ADMIN""
                };

                Task<IdentityResult> createAdminRole = roleManager.CreateAsync(newAdminRole);
                createAdminRole.Wait();
            }
");
            
            #line 410 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 foreach (string role in config.Authentication.OtherRoles) { 
            
            #line default
            #line hidden
            this.Write("\r\n            Task<IdentityRole<Guid>> ");
            
            #line 412 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(role.ToLower()));
            
            #line default
            #line hidden
            this.Write("Role = roleManager.FindByNameAsync(\"");
            
            #line 412 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(role));
            
            #line default
            #line hidden
            this.Write("\");\r\n            ");
            
            #line 413 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(role.ToLower()));
            
            #line default
            #line hidden
            this.Write("Role.Wait();\r\n            if (");
            
            #line 414 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(role.ToLower()));
            
            #line default
            #line hidden
            this.Write("Role.Result == null)\r\n            {\r\n                IdentityRole<Guid> new");
            
            #line 416 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(role));
            
            #line default
            #line hidden
            this.Write("Role = new IdentityRole<Guid>()\r\n                {\r\n                    Name = \"");
            
            #line 418 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(role));
            
            #line default
            #line hidden
            this.Write("\",\r\n                    NormalizedName = \"");
            
            #line 419 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(role.ToUpper()));
            
            #line default
            #line hidden
            this.Write("\"\r\n                };\r\n\r\n                Task<IdentityResult> create");
            
            #line 422 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(role));
            
            #line default
            #line hidden
            this.Write("Role = roleManager.CreateAsync(new");
            
            #line 422 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(role));
            
            #line default
            #line hidden
            this.Write("Role);\r\n                create");
            
            #line 423 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(role));
            
            #line default
            #line hidden
            this.Write("Role.Wait();\r\n            }\r\n");
            
            #line 425 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"
            // Default admin user
            Task<User> adminUser = userManager.FindByNameAsync(configuration.GetSection(""Authentication"").GetSection(""Admin"").GetValue<string>(""Username""));
            adminUser.Wait();
            if (adminUser.Result == null)
            {
                User newAdminUser = new User()
                {
                    Email = configuration.GetSection(""Authentication"").GetSection(""Admin"").GetValue<string>(""Email""),
                    UserName = configuration.GetSection(""Authentication"").GetSection(""Admin"").GetValue<string>(""Username""),
                    FirstName = configuration.GetSection(""Authentication"").GetSection(""Admin"").GetValue<string>(""FirstName""),
                    LastName = configuration.GetSection(""Authentication"").GetSection(""Admin"").GetValue<string>(""LastName""),
                    EmailConfirmed = true
                };

                Task<IdentityResult> newUser = userManager.CreateAsync(newAdminUser, configuration.GetSection(""Authentication"").GetSection(""Admin"").GetValue<string>(""Password""));
                newUser.Wait();
                if (newUser.Result.Succeeded)
                {
                    // Add to the Admin role
                    Task<IdentityResult> newUserRole = userManager.AddToRoleAsync(newAdminUser, ""Admin"");
                    newUserRole.Wait();
                }
            }
        }
");
            
            #line 451 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"    }

    public class ErrorHandlingMiddleware
    {
        private readonly RequestDelegate next;

        public ErrorHandlingMiddleware(RequestDelegate next)
        {
            this.next = next;
        }

        public async Task Invoke(HttpContext context)
        {
            try
            {
                await next(context);
            }
            catch (Exception ex)
            {
                await HandleException(context, ex);
            }
        }

        private static Task HandleException(HttpContext context, Exception ex)
        {
            HttpStatusCode code = HttpStatusCode.InternalServerError; // 500 if unexpected

            // Specify different custom exceptions here
");
            
            #line 480 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 if (config.Authentication.Enabled) { 
            
            #line default
            #line hidden
            this.Write(@"            if (ex is LoginFailedException) code = HttpStatusCode.BadRequest;
            if (ex is RegistrationFailedException) code = HttpStatusCode.BadRequest;
            if (ex is ConfirmEmailFailedException) code = HttpStatusCode.BadRequest;
            if (ex is ForgotPasswordFailedException) code = HttpStatusCode.BadRequest;
            if (ex is ResetPasswordFailedException) code = HttpStatusCode.BadRequest;
");
            
            #line 486 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"
            string result = JsonConvert.SerializeObject(new { error = ex.Message });

            context.Response.ContentType = ""application/json"";
            context.Response.StatusCode = (int)code;

            return context.Response.WriteAsync(result);
        }
    }
}
");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class StartupTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
