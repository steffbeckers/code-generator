// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CodeGenCLI.Templates.WebAPI
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using CodeGenCLI.CodeGenClasses;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class StartupTemplate : StartupTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"using AutoMapper;
using GraphQL;
using GraphQL.Server;
using GraphQL.Server.Ui.Playground;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Server.Kestrel.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using System;
using System.IO;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using ");
            
            #line 28 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".BLL;\r\nusing ");
            
            #line 29 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".DAL;\r\nusing ");
            
            #line 30 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".DAL.Repositories;\r\nusing ");
            
            #line 31 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".GraphQL;\r\nusing ");
            
            #line 32 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".Models;\r\nusing ");
            
            #line 33 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(".Services;\r\n\r\nnamespace ");
            
            #line 35 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name));
            
            #line default
            #line hidden
            this.Write(@"
{
    public class Startup
    {
        public IConfiguration configuration { get; }

        public Startup(IConfiguration configuration)
        {
            this.configuration = configuration;
        }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
		    // CORS
            services.AddCors();

            // Connection to the ");
            
            #line 52 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(config.Name));
            
            #line default
            #line hidden
            this.Write(" database\r\n            services.AddDbContext<");
            
            #line 53 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(config.Name));
            
            #line default
            #line hidden
            this.Write("Context>(options =>\r\n                options.UseSqlServer(this.configuration.GetC" +
                    "onnectionString(\"");
            
            #line 54 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(config.Name));
            
            #line default
            #line hidden
            this.Write("Context\")));\r\n");
            
            #line 55 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
    if (config.Authentication.Enabled) { 
            
            #line default
            #line hidden
            this.Write("\r\n            // Authentication\r\n            services.AddIdentity<User, IdentityR" +
                    "ole>()\r\n                .AddRoleManager<RoleManager<IdentityRole>>()\r\n          " +
                    "      .AddEntityFrameworkStores<");
            
            #line 60 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(config.Name));
            
            #line default
            #line hidden
            this.Write("Context>()\r\n                .AddDefaultTokenProviders();\r\n\r\n            //// Opti" +
                    "ons\r\n            services.Configure<IdentityOptions>(options =>\r\n            {\r\n" +
                    "                // Sign in\r\n                options.SignIn.RequireConfirmedEmail" +
                    " = false; // ANONYMOUS\r\n\r\n                // Password settings\r\n                " +
                    "options.Password.RequireDigit = true;\r\n                options.Password.Required" +
                    "Length = 10;\r\n                options.Password.RequireNonAlphanumeric = false;\r\n" +
                    "                options.Password.RequireUppercase = true;\r\n                optio" +
                    "ns.Password.RequireLowercase = true;\r\n                options.Password.RequiredU" +
                    "niqueChars = 6;\r\n\r\n                // Lockout settings\r\n                options." +
                    "Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(30);\r\n                opti" +
                    "ons.Lockout.MaxFailedAccessAttempts = 10;\r\n                options.Lockout.Allow" +
                    "edForNewUsers = true;\r\n\r\n                // User settings\r\n                optio" +
                    "ns.User.RequireUniqueEmail = true;\r\n            });\r\n\r\n            //// JWT\'s\r\n " +
                    "           services.AddAuthentication(options =>\r\n            {\r\n               " +
                    " options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\r\n  " +
                    "              options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationS" +
                    "cheme;\r\n            })\r\n            .AddJwtBearer(options =>\r\n            {\r\n   " +
                    "             options.RequireHttpsMetadata = false;\r\n                options.Save" +
                    "Token = true;\r\n                options.TokenValidationParameters = new TokenVali" +
                    "dationParameters\r\n                {\r\n                    ValidateIssuerSigningKe" +
                    "y = true,\r\n                    IssuerSigningKey = new SymmetricSecurityKey(Encod" +
                    "ing.ASCII.GetBytes(configuration.GetSection(\"Authentication\").GetValue<string>(\"" +
                    "Secret\"))),\r\n                    ValidateIssuer = false,\r\n                    Va" +
                    "lidateAudience = false,\r\n                    ClockSkew = TimeSpan.Zero,\r\n       " +
                    "             ValidateLifetime = true\r\n                };\r\n                option" +
                    "s.Events = new JwtBearerEvents\r\n                {\r\n                    OnMessage" +
                    "Received = context =>\r\n                    {\r\n                        // Allow t" +
                    "he access token to be set by query param\r\n                        if (context.Re" +
                    "quest.Method.Equals(\"GET\") && context.Request.Query.ContainsKey(\"access_token\"))" +
                    "\r\n                            context.Token = context.Request.Query[\"access_toke" +
                    "n\"];\r\n\r\n                        return Task.CompletedTask;\r\n                    " +
                    "}\r\n                };\r\n            });\r\n");
            
            #line 117 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n            // Repositories\r\n");
            
            #line 120 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 foreach (CodeGenModel model in config.Models) { 
            
            #line default
            #line hidden
            this.Write("\t\t\tservices.AddScoped<");
            
            #line 121 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Name));
            
            #line default
            #line hidden
            this.Write("Repository>();\r\n");
            
            #line 122 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t// BLLs\r\n");
            
            #line 125 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 foreach (CodeGenModel model in config.Models.Where(m => !m.ManyToMany)) { 
            
            #line default
            #line hidden
            this.Write("\t\t\tservices.AddScoped<");
            
            #line 126 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.Name));
            
            #line default
            #line hidden
            this.Write("BLL>();\r\n");
            
            #line 127 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n            // Services\r\n");
            
            #line 130 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 if (config.WebAPI.EmailService.Enabled) { 
            
            #line default
            #line hidden
            this.Write("            services.AddSingleton<IEmailService, EmailService>();\r\n");
            
            #line 132 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n            // GraphQL\r\n            services.AddScoped<IDependencyResolver>(s =" +
                    ">\r\n                new FuncDependencyResolver(s.GetRequiredService));\r\n         " +
                    "   services.AddScoped<");
            
            #line 137 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(config.Name));
            
            #line default
            #line hidden
            this.Write(@"Schema>();
            services.AddGraphQL(options =>
            {
                options.ExposeExceptions = true; // TODO: Only in DEV
            }).AddGraphTypes(ServiceLifetime.Scoped)
            .AddUserContextBuilder(httpContext => httpContext.User)
            .AddWebSockets();

			// AutoMapper
            var mappingConfig = new MapperConfiguration(mc =>
            {
                mc.AddProfile(new AutoMapperProfile());
            });
            IMapper mapper = mappingConfig.CreateMapper();
            services.AddSingleton(mapper);

			// MVC
            services.AddControllers()
                .AddNewtonsoftJson(options => {
                    options.SerializerSettings.MaxDepth = 5;
                    options.SerializerSettings.NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore;
                    options.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore;
                }
            );

			// Swagger
			// Register the Swagger generator, defining 1 or more Swagger documents
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc(""v1"", new OpenApiInfo
                {
                    Title = """);
            
            #line 168 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(config.Name));
            
            #line default
            #line hidden
            this.Write(" Web API\",\r\n                    Version = \"v1\"\r\n                });\r\n\r\n          " +
                    "      // Set the comments path for the Swagger JSON and UI.\r\n                var" +
                    " xmlFile = $\"{Assembly.GetExecutingAssembly().GetName().Name}.xml\";\r\n           " +
                    "     var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);\r\n           " +
                    "     c.IncludeXmlComments(xmlPath);\r\n            });\r\n\r\n            // Kestrel\r\n" +
                    "            services.Configure<KestrelServerOptions>(options =>\r\n            {\r\n" +
                    "                options.AllowSynchronousIO = true;\r\n            });\r\n\r\n         " +
                    "   // IIS Express\r\n            services.Configure<IISServerOptions>(options =>\r\n" +
                    "            {\r\n                options.AllowSynchronousIO = true;\r\n            }" +
                    ");\r\n        }\r\n\r\n        // This method gets called by the runtime. Use this met" +
                    "hod to configure the HTTP request pipeline.\r\n        public void Configure(IAppl" +
                    "icationBuilder app, IWebHostEnvironment env)\r\n        {\r\n\t\t    // CORS\r\n        " +
                    "    app.UseCors(options =>\r\n\t\t\t{\r\n                options.AllowAnyOrigin()\r\n    " +
                    "                .AllowAnyMethod()\r\n                    .AllowAnyHeader();\r\n     " +
                    "       });\r\n\r\n            if (env.IsDevelopment())\r\n            {\r\n             " +
                    "   app.UseDeveloperExceptionPage();\r\n            }\r\n            else\r\n          " +
                    "  {\r\n                app.UseExceptionHandler(appBuilder =>\r\n                {\r\n " +
                    "                   appBuilder.Run(async context =>\r\n                    {\r\n     " +
                    "                   context.Response.StatusCode = 500;\r\n                        a" +
                    "wait context.Response.WriteAsync(\"An unexpected fault happened. Try again later." +
                    "\");\r\n                    });\r\n                });\r\n            }\r\n\r\n            " +
                    "// Web sockets\r\n            app.UseWebSockets();\r\n\r\n            // GraphQL\r\n    " +
                    "        app.UseGraphQLWebSockets<");
            
            #line 222 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(config.Name));
            
            #line default
            #line hidden
            this.Write("Schema>(\"/graphql\");\r\n            app.UseGraphQL<");
            
            #line 223 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(config.Name));
            
            #line default
            #line hidden
            this.Write(@"Schema>();
            app.UseGraphQLPlayground(new GraphQLPlaygroundOptions());

			// Swagger
            // Enable middleware to serve generated Swagger as a JSON endpoint.
            app.UseSwagger()
            // Enable middleware to serve swagger-ui (HTML, JS, CSS, etc.), 
            // specifying the Swagger JSON endpoint.
            .UseSwaggerUI(c =>
            {
                c.SwaggerEndpoint(""./swagger/v1/swagger.json"", """);
            
            #line 233 "C:\dev\steffbeckers\code-generator\dotnet-angular\code-gen-cli\CodeGenCLI\Templates\WebAPI\StartupTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(config.Name));
            
            #line default
            #line hidden
            this.Write(@" Web API V1"");
                c.RoutePrefix = string.Empty;
            });

            // Authentication
            app.UseAuthentication();

            app.UseRouting();

			// Authorization
            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }
    }
}
");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class StartupTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
