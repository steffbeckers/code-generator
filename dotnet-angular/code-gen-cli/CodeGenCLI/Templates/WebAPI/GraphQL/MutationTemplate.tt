<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CodeGenCLI.CodeGenClasses" #>
<#@ import namespace="CodeGenCLI.Extensions" #>
using GraphQL.Types;
using System;
using <#= !string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name #>.BLL;
using <#= !string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name #>.GraphQL.Types;
using <#= !string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name #>.Models;

namespace <#= !string.IsNullOrEmpty(config.WebAPI.NamespaceRoot) ? config.WebAPI.NamespaceRoot : config.Name #>.GraphQL
{
    public class <#= config.Name #>Mutation : ObjectGraphType
    {
        public <#= config.Name #>Mutation(
<# CodeGenModel lastModel = config.Models.Where(m => !m.ManyToMany).Last(); #>
<# foreach (CodeGenModel model in config.Models.Where(m => !m.ManyToMany)) { #>
			<#= model.Name #>BLL <#= model.Name.ToCamelCase() #>BLL<#= (!model.Equals(lastModel) ? "," : "") #>
<# } #>
        )
        {
<# foreach (CodeGenModel model in config.Models.Where(m => !m.ManyToMany)) { #>
			// <#= !string.IsNullOrEmpty(model.NamePlural) ? model.NamePlural : model.Name + "s" #>
            FieldAsync<<#= model.Name #>Type>(
                "create<#= model.Name #>",
                arguments: new QueryArguments(
                    new QueryArgument<NonNullGraphType<<#= model.Name #>InputType>>
                    {
                        Name = "<#= model.Name.ToCamelCase() #>"
                    }
                ),
                resolve: async context =>
                {
                    <#= model.Name #> <#= model.Name.ToCamelCase() #> = context.GetArgument<<#= model.Name #>>("<#= model.Name.ToCamelCase() #>");

                    return await context.TryAsyncResolve(
                        async c => await <#= model.Name.ToCamelCase() #>BLL.Create<#= model.Name #>Async(<#= model.Name.ToCamelCase() #>)
                    );
                }
            );

            FieldAsync<<#= model.Name #>Type>(
                "update<#= model.Name #>",
                arguments: new QueryArguments(
                    //new QueryArgument<NonNullGraphType<IdGraphType>>
                    //{
                    //    Name = "id"
                    //},
                    new QueryArgument<NonNullGraphType<<#= model.Name #>InputType>>
                    {
                        Name = "<#= model.Name.ToCamelCase() #>"
                    }
                ),
                resolve: async context =>
                {
                    //Guid id = context.GetArgument<Guid>("id");
                    <#= model.Name #> <#= model.Name.ToCamelCase() #> = context.GetArgument<<#= model.Name #>>("<#= model.Name.ToCamelCase() #>");

                    return await context.TryAsyncResolve(
                        async c => await <#= model.Name.ToCamelCase() #>BLL.Update<#= model.Name #>Async(<#= model.Name.ToCamelCase() #>)
                    );
                }
            );

<# foreach (CodeGenModelRelation relation in model.Relations.Where(r => r.Type == "many-to-many")) { #>
<# CodeGenModel relationModel = config.Models.Single(m => m.Name == relation.Model); #>
            FieldAsync<<#= model.Name #>Type>(
                "link<#= relationModel.Name #>To<#= model.Name #>",
                arguments: new QueryArguments(
                    new QueryArgument<NonNullGraphType<<#= relation.Through #>InputType>>
                    {
                        Name = "<#= relation.Through.ToCamelCase() #>"
                    }
                ),
                resolve: async context =>
                {
                    <#= relation.Through #> <#= relation.Through.ToCamelCase() #> = context.GetArgument<<#= relation.Through #>>("<#= relation.Through.ToCamelCase() #>");

                    return await context.TryAsyncResolve(
                        async c => await <#= model.Name.ToCamelCase() #>BLL.Link<#= relationModel.Name #>To<#= model.Name #>Async(<#= relation.Through.ToCamelCase() #>)
                    );
                }
            );

            FieldAsync<<#= model.Name #>Type>(
                "unlink<#= relationModel.Name #>From<#= model.Name #>",
                arguments: new QueryArguments(
                    new QueryArgument<NonNullGraphType<<#= relation.Through #>InputType>>
                    {
                        Name = "<#= relation.Through.ToCamelCase() #>"
                    }
                ),
                resolve: async context =>
                {
                    <#= relation.Through #> <#= relation.Through.ToCamelCase() #> = context.GetArgument<<#= relation.Through #>>("<#= relation.Through.ToCamelCase() #>");

                    return await context.TryAsyncResolve(
                        async c => await <#= model.Name.ToCamelCase() #>BLL.Unlink<#= relationModel.Name #>From<#= model.Name #>Async(<#= relation.Through.ToCamelCase() #>)
                    );
                }
            );

<# } #>
            FieldAsync<<#= model.Name #>Type>(
                "remove<#= model.Name #>",
                arguments: new QueryArguments(
                    new QueryArgument<NonNullGraphType<IdGraphType>>
                    {
                        Name = "id"
                    }
                ),
                resolve: async context =>
                {
                    Guid id = context.GetArgument<Guid>("id");

                    return await context.TryAsyncResolve(
                        async c => await <#= model.Name.ToCamelCase() #>BLL.Delete<#= model.Name #>ByIdAsync(id)
                    );
                }
            );

<# } #>
        }
    }
}

